.版本 2
.支持库 spec
.支持库 EThread
.支持库 eAPI
.支持库 commobj
.支持库 sock
.支持库 shellEx

.程序集 窗口程序集_启动窗口
.程序集变量 ws, WebSocketClient
.程序集变量 传递_本地端口, 整数型
.程序集变量 传递_创建端口, 整数型
.程序集变量 传递_协议, 文本型
.程序集变量 传递_描述, 文本型
.程序集变量 传递_版本, 整数型
.程序集变量 测试句柄, 整数型
.程序集变量 热键, 整数型
.程序集变量 保存周期, 整数型
.程序集变量 全WS服务器, 服务器信息, , "0"
.程序集变量 设置昵称线程, 整数型
.程序集变量 获取全WS服务器, 文本型
.程序集变量 获取全端口扫描服务器, 文本型
.程序集变量 获取全检测IP服务器, 文本型
.程序集变量 获取服务器结果, 整数型

.子程序 __启动窗口_创建完毕

当前版本 ＝ 56
保存周期 ＝ 2000
心跳包周期 ＝ 5000
调试输出 (取系统语言 (), 取系统语言2 ())

.子程序 设置昵称_线程
.局部变量 输入的内容, 文本型

.如果 (是否中文系统)
    输入框 (转换编码 (“请输入昵称” ＋ #换行符 ＋ “此昵称为本软件联机时使用的昵称，建议设为开黑称呼或游戏ID。”), 转换编码 (“设置昵称”), , 输入的内容, 1, _启动窗口)
.否则
    输入框 (“Please enter a nickname” ＋ #换行符 ＋ “This nickname is the nickname used when the software is online. It is recommended to set it as the game ID.”, “Set nickname”, , 输入的内容, 1, _启动窗口)
.如果结束
编辑框5.内容 ＝ 输入的内容

.子程序 检查设置昵称

.如果真 (编辑框5.内容 ＝ “” 或 编辑框5.内容 ＝ “消息”)
    .如果真 (设置昵称线程 ＝ 0)
        启动线程 (&设置昵称_线程, , 设置昵称线程)
    .如果真结束

.如果真结束


.子程序 取进程路径, 文本型
.参数 pid
.局部变量 hp
.局部变量 name, 文本型
.局部变量 pan, 文本型
.局部变量 i, 整数型
.局部变量 Dpan, 文本型

name ＝ 取空白文本 (260)
Dpan ＝ 取空白文本 (250)
hp ＝ OpenProcess (位异或 (1024, 16), 0, pid)
.如果真 (hp ＝ 0)
    返回 (“”)
.如果真结束
GetProcessImageFileNameA (hp, name, 260)
.计次循环首 (26, i)
    pan ＝ 字符 (64 ＋ i) ＋ “:”
    QueryDosDevice (pan, Dpan, 250)
    .如果真 (寻找文本 (name, Dpan, , 假) ≠ -1)
        name ＝ 子文本替换 (name, Dpan, pan, , , 真)
        返回 (name)
    .如果真结束

.计次循环尾 ()
返回 (name)

.子程序 测试WS服务器延迟快
.局部变量 已次数, 整数型
.局部变量 最高延迟, 整数型
.局部变量 最低延迟, 整数型
.局部变量 当前IP, 文本型, , "0"
.局部变量 此次开始时间, 长整数型
.局部变量 此轮开始时间, 长整数型
.局部变量 全部开始时间, 长整数型
.局部变量 设置超时时间, 整数型
.局部变量 全部延迟结果, 文本型, , "0"
.局部变量 当前全部延迟结果, 文本型, , "0"
.局部变量 全部测试耗时, 整数型, , "0"
.局部变量 全部延迟, 整数型
.局部变量 延迟次数, 整数型
.局部变量 内已次数, 整数型
.局部变量 当前测试结果, 整数型
.局部变量 当前等待时间, 整数型
.局部变量 总测试次数, 整数型

设置超时时间 ＝ 2000
.如果 (是否中文系统)
    输出文本 (“开始测试节点,按延迟最低的排序以降低延迟”, 真, 真)
    输出文本 (“这可能需要耗时10秒左右，请稍等。。”, 真, 真)
.否则
    输出文本 (“Start testing the nodes, sorting by the lowest delay to reduce the delay”, 真, 真)
.如果结束
.计次循环首 (取数组成员数 (全WS服务器), 已次数)
    加入成员 (当前IP, 全WS服务器 [已次数].服务器地址)
    加入成员 (全部延迟结果, “”)
    加入成员 (全部测试耗时, 0)
    当前IP [已次数] ＝ 转换为IP地址 (文本_取出中间文本 (全WS服务器 [已次数].服务器地址, “//”, “:”))
    .如果真 (当前IP [已次数] ＝ “”)
        当前IP [已次数] ＝ 转换为IP地址 (文本_取出中间文本 (全WS服务器 [已次数].服务器地址, “//”, “:”))
        .如果真 (当前IP [已次数] ＝ “”)
            .如果 (是否中文系统)
                输出文本 (“解析域名到IP失败,请检查您的DNS是否正常!”, 真, 真)
            .否则
                输出文本 (“Failed to resolve domain name to IP, please check if your DNS is normal!”, 真, 真)
            .如果结束
            当前IP [已次数] ＝ 全WS服务器 [已次数].服务器地址
        .如果真结束

    .如果真结束

.计次循环尾 ()
全部开始时间 ＝ 到长整数 (时间_取现行时间戳 ())
.循环判断首 ()
    此轮开始时间 ＝ 到长整数 (时间_取现行时间戳 ())
    .计次循环首 (取数组成员数 (全WS服务器), 已次数)
        .如果真 (全部测试耗时 [已次数] ＞ 5000)
            到循环尾 ()
        .如果真结束
        此次开始时间 ＝ 到长整数 (时间_取现行时间戳 ())
        当前测试结果 ＝ 通信测试 (当前IP [已次数], 设置超时时间)
        全部延迟结果 [已次数] ＝ 全部延迟结果 [已次数] ＋ 到文本 (当前测试结果) ＋ #换行符
        全部测试耗时 [已次数] ＝ 全部测试耗时 [已次数] ＋ 到长整数 (时间_取现行时间戳 ()) － 此次开始时间
        调试输出 (全WS服务器 [已次数].服务器地址, 当前测试结果, 当前IP [已次数])
        延迟 (20)
    .计次循环尾 ()
    当前等待时间 ＝ 800 － 取数组成员数 (全WS服务器) × 100
    .如果真 (当前等待时间 ＞ 600)
        当前等待时间 ＝ 600
    .如果真结束
    当前等待时间 ＝ 当前等待时间 － (到长整数 (时间_取现行时间戳 ()) － 此轮开始时间)
    调试输出 (“当前等待时间”, 当前等待时间)
    .如果 (当前等待时间 ＞ 0)
        延迟 (当前等待时间)
    .否则
        处理事件 ()
    .如果结束
    总测试次数 ＝ 总测试次数 ＋ 1
.循环判断尾 (总测试次数 ＜ 16 且 到长整数 (时间_取现行时间戳 ()) － 全部开始时间 ＜ 11000)
.计次循环首 (取数组成员数 (全WS服务器), 已次数)
    输出文本 (“测试:” ＋ 全WS服务器 [已次数].服务器描述, 真, 真)
    最高延迟 ＝ 0
    最低延迟 ＝ 10000
    全部延迟 ＝ 0
    延迟次数 ＝ 0
    清除数组 (当前全部延迟结果)
    当前全部延迟结果 ＝ 分割文本 (全部延迟结果 [已次数], #换行符, )
    .计次循环首 (取数组成员数 (当前全部延迟结果), 内已次数)
        .如果真 (到整数 (当前全部延迟结果 [内已次数]) ≠ -1)
            全部延迟 ＝ 全部延迟 ＋ 到整数 (当前全部延迟结果 [内已次数])
            延迟次数 ＝ 延迟次数 ＋ 1
            .如果真 (到整数 (当前全部延迟结果 [内已次数]) ＞ 最高延迟)
                最高延迟 ＝ 到整数 (当前全部延迟结果 [内已次数])
            .如果真结束
            .如果真 (到整数 (当前全部延迟结果 [内已次数]) ＜ 最低延迟)
                最低延迟 ＝ 到整数 (当前全部延迟结果 [内已次数])
            .如果真结束

        .如果真结束

    .计次循环尾 ()
    .如果 (延迟次数 ＝ 0)
        全WS服务器 [已次数].丢包率 ＝ 100
        全WS服务器 [已次数].平均延迟 ＝ 设置超时时间 ＋ 已次数
        全WS服务器 [已次数].延迟波动 ＝ 0
        .如果 (是否中文系统)
            输出文本 (“测试失败，ping测试结果全部超时！”, 真, 真)
        .否则
            输出文本 (“The test failed because the ping test results all timed out!”, 真, 真)
        .如果结束

    .否则
        全WS服务器 [已次数].丢包率 ＝ 100 － 四舍五入 (延迟次数 ÷ 取数组成员数 (当前全部延迟结果) × 100, 1)
        全WS服务器 [已次数].平均延迟 ＝ 四舍五入 (全部延迟 ÷ 延迟次数, 0)
        全WS服务器 [已次数].延迟波动 ＝ 最高延迟 － 最低延迟
        .如果 (是否中文系统)
            输出文本 (“平均延迟:” ＋ 到文本 (全WS服务器 [已次数].平均延迟 ＋ 全WS服务器 [已次数].服务端延迟) ＋ “ms,抖动:” ＋ 到文本 (全WS服务器 [已次数].延迟波动) ＋ “ms,丢包率:” ＋ 到文本 (全WS服务器 [已次数].丢包率) ＋ “%”, 真, 真)
        .否则
            输出文本 (“rtt min/avg/max = ” ＋ 到文本 (最低延迟 ＋ 全WS服务器 [已次数].服务端延迟) ＋ “/” ＋ 到文本 (全WS服务器 [已次数].平均延迟 ＋ 全WS服务器 [已次数].服务端延迟) ＋ “/” ＋ 到文本 (最高延迟 ＋ 全WS服务器 [已次数].服务端延迟) ＋ “ ms, ” ＋ 到文本 (全WS服务器 [已次数].丢包率) ＋ “% packet loss”, 真, 真)
        .如果结束

    .如果结束
    .如果 (全WS服务器 [已次数].丢包率 ＜ 13)
        全WS服务器 [已次数].整体分数 ＝ 全WS服务器 [已次数].平均延迟 ＋ 全WS服务器 [已次数].服务端延迟 ＋ 全WS服务器 [已次数].延迟波动 ÷ 3 ＋ 全WS服务器 [已次数].丢包率 × 4
    .否则
        全WS服务器 [已次数].整体分数 ＝ 全WS服务器 [已次数].平均延迟 ＋ 全WS服务器 [已次数].服务端延迟 ＋ 全WS服务器 [已次数].延迟波动 ÷ 3 ＋ 全WS服务器 [已次数].丢包率 × 10
    .如果结束
    调试输出 (“分数”, 全WS服务器 [已次数].整体分数)
.计次循环尾 ()
服务器排序 ()
.如果 (是否中文系统)
    输出文本 (“已重新排序,首个节点延迟为:” ＋ 到文本 (全WS服务器 [1].平均延迟 ＋ 全WS服务器 [1].服务端延迟) ＋ “ms(” ＋ 到文本 (四舍五入 ((全WS服务器 [1].平均延迟 ＋ 全WS服务器 [1].服务端延迟) ÷ 1000, 2)) ＋ “秒)”, 真, 真)
.否则
    输出文本 (“Reordered, the first node delay is ” ＋ 到文本 (全WS服务器 [1].平均延迟 ＋ 全WS服务器 [1].服务端延迟) ＋ “ms”, 真, 真)
.如果结束


.子程序 服务器排序, , , 冒泡排序
.局部变量 n, 整数型
.局部变量 i, 整数型
.局部变量 t, 服务器信息

.变量循环首 (1, 取数组成员数 (全WS服务器), 1, n)
    .变量循环首 (1, 取数组成员数 (全WS服务器) － n, 1, i)
        .如果真 (全WS服务器 [i].整体分数 ＞ 全WS服务器 [i ＋ 1].整体分数)
            t ＝ 全WS服务器 [i]
            全WS服务器 [i] ＝ 全WS服务器 [i ＋ 1]
            全WS服务器 [i ＋ 1] ＝ t
        .如果真结束

    .变量循环尾 ()
.变量循环尾 ()

.子程序 获取WS服务器, 逻辑型, , 获取到的不同地址最后都会连接到同一个服务器上
.局部变量 访问结果, 文本型
.局部变量 全内容, 文本型, , "0"
.局部变量 已次数, 整数型
.局部变量 当前服务器, 服务器信息
.局部变量 获取次数

.如果真 (取数组成员数 (全WS服务器) ≠ 0)
    返回 (真)
.如果真结束
.如果 (获取全WS服务器 ＝ “”)
    .如果 (是否中文系统)
        输出文本 (“正在获取WS服务器列表，若网络不好会卡一下”, 真, 真)
    .否则
        输出文本 (“Getting a list of WebSocket servers”, 真, 真)
    .如果结束
    .循环判断首 ()
        访问结果 ＝ 到文本 (网页_访问_对象 (“https://wgzeyu.gtxcn.com/GTASuperESC/serverlist.php?b64=1”, , , , , , , , , , , 10))
        处理事件 ()
        .如果真 (快速取出现次数 (访问结果, “</base64>”) ＝ 0)
            访问结果 ＝ 到文本 (网页_访问_对象 (“https://wgzeyu.github.io/GTASuperESC/serverlistb64.txt”, , , , , , , , , , , 10))
            访问结果 ＝ 文本_替换 (访问结果, , , , “<3>”, “<3>” ＋ #换行符)
        .如果真结束
        处理事件 ()
        获取次数 ＝ 获取次数 ＋ 1
    .循环判断尾 (快速取出现次数 (访问结果, “</base64>”) ＝ 0 且 获取次数 ＜ 3)
    访问结果 ＝ 到文本 (编码_BASE64解码 (文本_取出中间文本 (访问结果, “<base64>”, “</base64>”)))
    调试输出 (访问结果)
    .如果真 (快速取出现次数 (访问结果, “<1>”) ＝ 0)
        .如果 (是否中文系统)
            输出文本 (“获取失败，请检查您的网络连接！”, 真, 真)
        .否则
            输出文本 (“Get failed, please check your network connection!”, 真, 真)
        .如果结束
        返回 (假)
    .如果真结束

.否则
    访问结果 ＝ 获取全WS服务器
.如果结束
全内容 ＝ 分割文本 (访问结果, #换行符, )
.计次循环首 (取数组成员数 (全内容), 已次数)
    当前服务器.服务端延迟 ＝ 到整数 (文本_取出中间文本 (全内容 [已次数], “<0>”, “<1>”))
    当前服务器.服务器地址 ＝ 文本_取出中间文本 (全内容 [已次数], “<1>”, “<2>”)
    当前服务器.服务器描述 ＝ 文本_取出中间文本 (全内容 [已次数], “<2>”, “<3>”)
    .如果真 (是否中文系统 ＝ 假 且 文本_取出中间文本 (全内容 [已次数], “<3>”, “<4>”) ≠ “”)
        当前服务器.服务器描述 ＝ 文本_取出中间文本 (全内容 [已次数], “<3>”, “<4>”)
    .如果真结束
    .如果真 (当前服务器.服务器地址 ≠ “” 且 当前服务器.服务器描述 ≠ “”)
        加入成员 (全WS服务器, 当前服务器)
    .如果真结束

.计次循环尾 ()
.如果真 (取数组成员数 (全WS服务器) ≠ 0)
    .如果 (是否中文系统)
        输出文本 (“共获取到” ＋ 到文本 (取数组成员数 (全WS服务器)) ＋ “个服务器地址(不同地址可互通)”, 真, 真)
    .否则
        输出文本 (“A total of ” ＋ 到文本 (取数组成员数 (全WS服务器)) ＋ “ server addresses were obtained”, 真, 真)
    .如果结束
    .如果真 (取数组成员数 (全WS服务器) ＞ 1)
        测试WS服务器延迟快 ()
    .如果真结束
    返回 (真)
.如果真结束
.如果 (是否中文系统)
    输出文本 (“获取失败”, 真, 真)
.否则
    输出文本 (“Acquisition failed”, 真, 真)
.如果结束
返回 (假)

.子程序 改为英语

画板1.清除 (, , , 15)
画分组框 (画板1, 转换编码 (“Online mode”))
分组框4.标题 ＝ “Connect server”
分组框5.标题 ＝ “Create server”
分组框2.标题 ＝ “Shortcut key settings”
分组框3.标题 ＝ “Performing operations”
标签1.标题 ＝ “Number:”
按钮2.标题 ＝ “Connect”
选择框4.标题 ＝ “Strict heartbeat package”
选择框5.标题 ＝ “TCP connection”
选择框6.标题 ＝ “UDP datagram”
标签8.标题 ＝ “This number is a free server and does not support manual setting.”
选择框1.标题 ＝ “long password”
按钮1.标题 ＝ “Auto create”
按钮4.标题 ＝ “Manual create”
按钮12.标题 ＝ “Use free server”
标签2.标题 ＝ “Port:”
标签2.字体.字体名称 ＝ “”
标签延迟.标题 ＝ “Status: Display after online”
标签4.标题 ＝ “Hotkey:”
组合框1.置项目文本 (0, “None”)
按钮6.标题 ＝ “Or click here can also end GTA”
选择框2.标题 ＝ “End process(support mult)”
选择框3.标题 ＝ “Disable network card”
按钮9.标题 ＝ “Disable”
按钮9.字体.字体大小 ＝ 6
按钮10.字体.字体大小 ＝ 7
按钮10.标题 ＝ “Enable”
按钮7.标题 ＝ “GitHub”
按钮8.标题 ＝ “Feedback”
.如果 (标签6.宽度 ＝ 192)
    标签6.标题 ＝ “Click the button on the right to test disable the network card:”
.否则
    ' 标签6.标题 ＝ “Right click to run with administrator privile” ＋ #换行符 ＋ “ges to use the disable network card function.”
    标签6.标题 ＝ “Right click to run with administrator privileges to use the disable network card function.”
.如果结束
按钮11.标题 ＝ “Stuck single”
按钮11.字体.字体大小 ＝ 7
按钮3.标题 ＝ “Introduction”
按钮3.字体.字体大小 ＝ 7
按钮5.标题 ＝ “Send”
选择框7.标题 ＝ “Process disconnected”
标签6.是否自动折行 ＝ 真
标签6.高度 ＝ 30

.子程序 切换简繁体

.如果真 (分组框4.标题 ＝ “Connect server”)
    输出文本 (“保存设置后重启软件将显示为中文”, 真, 真)
    返回 ()
.如果真结束
画板1.清除 (, , , 15)
画分组框 (画板1, 转换编码 (“联机方式”))
分组框4.标题 ＝ 编码互转 (分组框4.标题)
分组框5.标题 ＝ 编码互转 (分组框5.标题)
分组框2.标题 ＝ 编码互转 (分组框2.标题)
分组框3.标题 ＝ 编码互转 (分组框3.标题)
标签1.标题 ＝ 编码互转 (标签1.标题)
按钮2.标题 ＝ 编码互转 (按钮2.标题)
选择框4.标题 ＝ 编码互转 (选择框4.标题)
选择框5.标题 ＝ 编码互转 (选择框5.标题)
选择框6.标题 ＝ 编码互转 (选择框6.标题)
标签8.标题 ＝ 编码互转 (标签8.标题)
选择框1.标题 ＝ 编码互转 (选择框1.标题)
按钮1.标题 ＝ 编码互转 (按钮1.标题)
按钮4.标题 ＝ 编码互转 (按钮4.标题)
按钮12.标题 ＝ 编码互转 (按钮12.标题)
标签2.标题 ＝ 编码互转 (标签2.标题)
标签延迟.标题 ＝ 编码互转 (标签延迟.标题)
标签4.标题 ＝ 编码互转 (标签4.标题)
组合框1.置项目文本 (0, 编码互转 (组合框1.取项目文本 (0)))
按钮6.标题 ＝ 编码互转 (按钮6.标题)
选择框2.标题 ＝ 编码互转 (选择框2.标题)
选择框3.标题 ＝ 编码互转 (选择框3.标题)
按钮9.标题 ＝ 编码互转 (按钮9.标题)
按钮10.标题 ＝ 编码互转 (按钮10.标题)
按钮7.标题 ＝ 编码互转 (按钮7.标题)
按钮8.标题 ＝ 编码互转 (按钮8.标题)
标签6.标题 ＝ 编码互转 (标签6.标题)
按钮11.标题 ＝ 编码互转 (按钮11.标题)
按钮3.标题 ＝ 编码互转 (按钮3.标题)
按钮5.标题 ＝ 编码互转 (按钮5.标题)
选择框7.标题 ＝ 编码互转 (选择框7.标题)
标签6.是否自动折行 ＝ 假
标签6.高度 ＝ 24

.子程序 编码互转, 文本型
.参数 要转换的, 文本型

.如果真 (是否繁体系统)
    返回 (编码_简体到BIG5 (要转换的))
.如果真结束
返回 (编码_BIG5到简体 (要转换的))

.子程序 转换编码, 文本型
.参数 要转换的, 文本型

.如果真 (是否繁体系统)
    返回 (编码_简体到BIG5 (要转换的))
.如果真结束
返回 (要转换的)

.子程序 获取服务器等待提示

延时 (5000)
.如果 (获取服务器结果 ＝ 0)
    输出文本 (“请稍候,仍在获取联机所需的服务器信息..”, 真, 真)
.否则
    返回 ()
.如果结束
延时 (10000)
.如果 (获取服务器结果 ＝ 0)
    输出文本 (“仍在获取服务器信息.....这网也太慢了吧”, 真, 真)
.否则
    返回 ()
.如果结束
延时 (15000)
.如果 (获取服务器结果 ＝ 0)
    输出文本 (“仍在获取服务器信息,应该快了,再等等吧.”, 真, 真)
.否则
    返回 ()
.如果结束
延时 (20000)
.如果 (获取服务器结果 ＝ 0)
    输出文本 (“(╯‵□′)╯︵┻━┻你这破网,再等等吧”, 真, 真)
.否则
    返回 ()
.如果结束
延时 (40000)
.如果 (获取服务器结果 ＝ 0)
    输出文本 (“可能还在获取,但应该超时了啊,出问题了?”, 真, 真)
.否则
    返回 ()
.如果结束
延时 (60000)
.如果 (获取服务器结果 ＝ 0)
    输出文本 (“可能是网络问题,也可能是系统或软件问题,软件获取失败但没有触发失败后从本地读取的策略,可能访问时卡了但没触发超时,请反馈给软件作者,复制当前信息区域所有内容,并提供系统版本,网络运营商”, 真, 真)
.否则
    返回 ()
.如果结束


.子程序 进程断网
.参数 断网进程名称, 文本型
.局部变量 进程的路径, 文本型
.局部变量 进程的ID, 整数型

进程的ID ＝ 进程_名取ID (断网进程名称)
进程的路径 ＝ 取进程路径 (进程的ID)
.如果 (进程的ID ＝ 0)
    .如果 (是否中文系统)
        输出文本 (断网进程名称 ＋ “未运行，无法断网”, 真, 真)
    .否则
        输出文本 (断网进程名称 ＋ “ is not running, can not perform network disconnection”, 真, 真)
    .如果结束
    返回 ()
.否则
    .如果真 (进程的路径 ＝ “”)
        进程的路径 ＝ 进程_取程序路径 (进程的ID)
    .如果真结束
    .如果真 (进程的路径 ＝ “”)
        .如果 (是否中文系统)
            输出文本 (“错误：无法获取到进程路径”, 真, 真)
        .否则
            输出文本 (“Error: Unable to get process path”, 真, 真)
        .如果结束
        返回 ()
    .如果真结束
    调试输出 (“进程路径”, 进程的路径)
    运行 (“netsh advfirewall firewall add rule name=” ＋ #引号 ＋ “GTASuperESC block program network” ＋ #引号 ＋ “ dir=out program=” ＋ #引号 ＋ 进程的路径 ＋ #引号 ＋ “ action=block enable=yes”, 假, 1)
    .如果 (是否中文系统)
        输出文本 (“已断开” ＋ 断网进程名称 ＋ “的网络”, 真, 真)
    .否则
        输出文本 (“The network of ” ＋ 断网进程名称 ＋ “ has been disconnected”, 真, 真)
    .如果结束

.如果结束


.子程序 恢复进程断网

运行 (“netsh advfirewall firewall delete rule name=” ＋ #引号 ＋ “GTASuperESC block program network” ＋ #引号, 假, 6)
.如果 (是否中文系统)
    输出文本 (“已取消进程断网”, 真, 真)
.否则
    输出文本 (“Network disconnection of process has been canceled”, 真, 真)
.如果结束


.子程序 __启动窗口_首次激活
.局部变量 读取内容, 文本型
.局部变量 已次数, 整数型

_启动窗口.标题 ＝ “GTASuperESCv” ＋ 到文本 (当前版本 ÷ 10) ＋ “ @WGzeyu”
.如果真 (取文本长度 (到文本 (当前版本 ÷ 10)) ＜ 3)
    _启动窗口.标题 ＝ “GTASuperESCv” ＋ 到文本 (当前版本 ÷ 10) ＋ “.0 @WGzeyu”
.如果真结束
画分组框 (画板1, “联机方式”)
读取设置 ()
获取服务器结果 ＝ 0
启动线程 (&更新检测, , )
.如果真 (是否中文系统)  ' 大概也就中国访问cloudflare会很慢吧。。
    启动线程 (&获取服务器等待提示, , )
.如果真结束
注册热键a ()
.如果 (是否管理员 ())
    .如果 (获取网络信息 ())
        .计次循环首 (取数组成员数 (网络详情), 已次数)
            组合框3.加入项目 (网络详情 [已次数].接口名称, )
            调试输出 (网络详情 [已次数].管理员状态, 网络详情 [已次数].状态, 网络详情 [已次数].类型, 网络详情 [已次数].接口名称)
        .计次循环尾 ()
        组合框3.现行选中项 ＝ 0
    .否则
        .如果 (是否中文系统)
            输出文本 (“错误：获取网络连接失败，请手动打开适配器设置，查看并输入您正在使用的网络连接名称”, 真, 真)
        .否则
            输出文本 (“Error: Failed to get the network connection, please open the adapter settings manually, view and enter the network connection name you are using”, 真, 真)
        .如果结束

    .如果结束

.否则
    .如果 (是否中文系统)
        标签6.标题 ＝ 转换编码 (“右键以管理员权限运行本软件才能使用断网相关功能”)
    .否则
        标签6.标题 ＝ “Right click the administrator to run the software to use the network disconnect function.”
    .如果结束
    标签6.宽度 ＝ 280
    选择框3.禁止 ＝ 真
    组合框3.禁止 ＝ 真
    选择框7.禁止 ＝ 真
    编辑框7.禁止 ＝ 真
.如果结束
.如果真 (是否多开 ())
    .如果 (是否中文系统)
        信息框 (转换编码 (“多开此软件可能会导致快捷键或端口冲突，从而影响使用，建议关闭全部后只开启一个软件，例如若开启第二个后关闭了实际成功建立快捷键的那个，另一个将无法检测快捷键”), #警告图标, 转换编码 (“警告”), _启动窗口)
    .否则
        信息框 (“Opening more software may cause shortcut keys or port conflicts, which may affect the use. It is recommended to turn off only one software after closing all. For example, if the second one is turned off, the one that actually successfully creates the shortcut key is closed, and the other one cannot detect the shortcut key.”, #警告图标, “Warning”, _启动窗口)
    .如果结束

.如果真结束
检测断网选中 ()
.如果真 (文件是否存在 (取运行目录 () ＋ “\” ＋ 取机器码 () ＋ “.ini”) ＝ 假)
    载入 (教程窗口, _启动窗口, 假)
    保存设置 (到整数 (编辑框3.内容), 组合框1.现行选中项, 组合框2.现行选中项, 选择框1.选中, 编辑框6.内容, 选择框2.选中, 选择框3.选中, 编辑框5.内容, 选择框5.选中, 选择框6.选中, 组合框4.现行选中项, 编辑框7.内容, 选择框7.选中)
.如果真结束


.子程序 画分组框
.参数 目标画板, 画板
.参数 分组框标题, 文本型, 可空

目标画板.自动重画 ＝ 真
目标画板.画笔颜色 ＝ 14474460
目标画板.画直线 (0, 6, 0, 目标画板.高度 － 1)
目标画板.画直线 (0, 目标画板.高度 － 2, 目标画板.宽度, 目标画板.高度 － 2)
目标画板.画直线 (目标画板.宽度 － 1, 6, 目标画板.宽度 － 1, 目标画板.高度 － 1)
.如果真 (分组框标题 ＝ “”)
    目标画板.画直线 (0, 6, 目标画板.宽度 － 1, 6)
    返回 ()
.如果真结束
目标画板.画直线 (0, 6, 6, 6)
目标画板.画直线 (取文本长度 (分组框标题) × 6 ＋ 10, 6, 目标画板.宽度 － 1, 6)
目标画板.字体.字体名称 ＝ “宋体”
目标画板.字体.字体大小 ＝ 9
目标画板.文本颜色 ＝ #黑色
目标画板.定位写出 (8, 0, 分组框标题)

.子程序 是否多开, 逻辑型
.局部变量 全进程, 进程信息, , "0"
.局部变量 已次数, 整数型

全进程 ＝ 取系统进程列表 ()
.变量循环首 (1, 取数组成员数 (全进程), 1, 已次数)
    .如果真 (到文本 (全进程 [已次数].进程名称) ＝ 取执行文件名 ())
        .如果真 (全进程 [已次数].进程标识符 ≠ GetCurrentProcessId ())
            返回 (真)
        .如果真结束

    .如果真结束

.变量循环尾 ()
返回 (假)

.子程序 保存设置, 逻辑型
.参数 端口号a, 整数型
.参数 功能键a, 整数型
.参数 快捷键a, 整数型
.参数 长密码a, 逻辑型
.参数 进程名a, 文本型
.参数 进程选中a, 逻辑型
.参数 网卡选中a, 逻辑型
.参数 昵称a, 文本型
.参数 TCP传输a, 逻辑型
.参数 UDP传输a, 逻辑型
.参数 系统语言a, 整数型
.参数 进程断网进程a, 文本型
.参数 进程断网选中a, 逻辑型
.局部变量 保存信息, 文本型
.局部变量 信息数组, 文本型, , "0"
.局部变量 模板数组, 文本型, , "0"
.局部变量 已次数, 整数型
.局部变量 生成信息, 文本型
.局部变量 返回的状态, 逻辑型

保存信息 ＝ 保存信息 ＋ 到文本 (端口号a) ＋ “</*内容*/>” ＋ #换行符
保存信息 ＝ 保存信息 ＋ 到文本 (功能键a) ＋ “</*内容*/>” ＋ #换行符
保存信息 ＝ 保存信息 ＋ 到文本 (快捷键a) ＋ “</*内容*/>” ＋ #换行符
保存信息 ＝ 保存信息 ＋ 到文本 (长密码a) ＋ “</*内容*/>” ＋ #换行符
保存信息 ＝ 保存信息 ＋ 到文本 (进程名a) ＋ “</*内容*/>” ＋ #换行符
保存信息 ＝ 保存信息 ＋ 到文本 (进程选中a) ＋ “</*内容*/>” ＋ #换行符
保存信息 ＝ 保存信息 ＋ 到文本 (网卡选中a) ＋ “</*内容*/>” ＋ #换行符
保存信息 ＝ 保存信息 ＋ 到文本 (昵称a) ＋ “</*内容*/>” ＋ #换行符
保存信息 ＝ 保存信息 ＋ 到文本 (TCP传输a) ＋ “</*内容*/>” ＋ #换行符
保存信息 ＝ 保存信息 ＋ 到文本 (UDP传输a) ＋ “</*内容*/>” ＋ #换行符
保存信息 ＝ 保存信息 ＋ 到文本 (系统语言a) ＋ “</*内容*/>” ＋ #换行符
保存信息 ＝ 保存信息 ＋ 到文本 (进程断网进程a) ＋ “</*内容*/>” ＋ #换行符
保存信息 ＝ 保存信息 ＋ 到文本 (进程断网选中a) ＋ “</*内容*/>” ＋ #换行符
信息数组 ＝ 分割文本 (保存信息, #换行符, )
模板数组 ＝ 分割文本 (“端口号,功能键,快捷键,长密码,进程名,进程选中,网卡选中,昵称,TCP传输,UDP传输,系统语言,进程断网进程,进程断网选中”, “,”, )
.如果真 (取数组成员数 (信息数组) ≠ 取数组成员数 (模板数组))
    .如果 (是否中文系统)
        信息框 (转换编码 (“内部错误：” ＋ #换行符 ＋ “设置模板数量与设置项目不匹配，” ＋ #换行符 ＋ “无法保存设置！”), 16, , )
    .否则
        信息框 (“Internal error: The number of set templates does not match the setting items, and the settings cannot be saved!”, 16, , )
    .如果结束
    返回 (假)
.如果真结束
.计次循环首 (取数组成员数 (信息数组), 已次数)
    信息数组 [已次数] ＝ 文本_替换 (信息数组 [已次数], , , , “</*内容*/>”, “”)  ' 加个内容是怕空行被忽略导致错位
    生成信息 ＝ 生成信息 ＋ “<” ＋ 模板数组 [已次数] ＋ “>” ＋ 信息数组 [已次数] ＋ “</” ＋ 模板数组 [已次数] ＋ “>” ＋ #换行符
.计次循环尾 ()
处理事件 ()
删除文件 (取运行目录 () ＋ “\” ＋ 取机器码 () ＋ “.ini”)
处理事件 ()
删除文件 (取运行目录 () ＋ “\GTASuperESC.ini”)
处理事件 ()
返回的状态 ＝ 写到文件 (取运行目录 () ＋ “\” ＋ 取机器码 () ＋ “.ini”, 编码_Ansi到Utf8 (生成信息))
处理事件 ()
置文件属性 (取运行目录 () ＋ “\” ＋ 取机器码 () ＋ “.ini”, #隐藏文件)
处理事件 ()
返回 (返回的状态)

.子程序 读取设置
.局部变量 全配置, 文本型

全配置 ＝ 编码_Utf8到Ansi (读入文件 (取运行目录 () ＋ “\” ＋ 取机器码 () ＋ “.ini”))
.如果真 (全配置 ＝ “”)
    全配置 ＝ 编码_Utf8到Ansi (读入文件 (取运行目录 () ＋ “\GTASuperESC.ini”))
.如果真结束
.如果真 (到整数 (取出设置 (全配置, “端口号”)) ≠ 0)
    编辑框3.内容 ＝ 到文本 (到整数 (取出设置 (全配置, “端口号”)))
.如果真结束
选择框1.选中 ＝ 到逻辑型 (取出设置 (全配置, “长密码”, “假”))
编辑框6.内容 ＝ 到文本 (取出设置 (全配置, “进程名”, “GTA5.exe”))
选择框2.选中 ＝ 到逻辑型 (取出设置 (全配置, “进程选中”, “真”))
选择框3.选中 ＝ 到逻辑型 (取出设置 (全配置, “网卡选中”, “假”))
编辑框5.内容 ＝ 到文本 (取出设置 (全配置, “昵称”, “消息”))
选择框5.选中 ＝ 到逻辑型 (取出设置 (全配置, “TCP传输”, “真”))
选择框6.选中 ＝ 到逻辑型 (取出设置 (全配置, “UDP传输”, “真”))
选择框7.选中 ＝ 到逻辑型 (取出设置 (全配置, “进程断网选中”, “假”))
编辑框7.内容 ＝ 到文本 (取出设置 (全配置, “进程断网进程”, “GTA5.exe”))
组合框4.现行选中项 ＝ 到整数 (取出设置 (全配置, “系统语言”, 到文本 (取系统语言2 ())))
.如果 (组合框4.现行选中项 ≠ 0)
    _组合框4_列表项被选择 ()
.否则
    是否中文系统 ＝ 真
    是否繁体系统 ＝ 假
.如果结束
组合框1.现行选中项 ＝ 到整数 (取出设置 (全配置, “功能键”, “0”))
组合框2.现行选中项 ＝ 到整数 (取出设置 (全配置, “快捷键”, “4”))


.子程序 取出设置, 文本型
.参数 全设置, 文本型
.参数 取出项目, 文本型
.参数 空时操作, 文本型, 可空, 取出设置为空时返回什么

.如果 (文本_取出中间文本 (全设置, “<” ＋ 取出项目 ＋ “>”, “</” ＋ 取出项目 ＋ “>”) ≠ “”)
    返回 (文本_取出中间文本 (全设置, “<” ＋ 取出项目 ＋ “>”, “</” ＋ 取出项目 ＋ “>”))
.否则
    返回 (空时操作)
.如果结束


.子程序 检测创建支持
.局部变量 创建端口, 整数型
.局部变量 已次数, 整数型
.局部变量 检测结果, 整数型
.局部变量 测试次数, 整数型, , , 不能小于2
.局部变量 返回结果, 整数型
.局部变量 是否调试, 逻辑型
.局部变量 创建结果, 整数型
.局部变量 创建开始时间, 长整数型
.局部变量 输出序号, 整数型
.局部变量 全创建结果, 整数型, , "0"
.局部变量 内已次数, 整数型
.局部变量 是否存在, 逻辑型
.局部变量 路由器获取到的IP, 文本型
.局部变量 是否为NATPMP, 逻辑型

是否检测中 ＝ 真
是否调试 ＝ 假
测试次数 ＝ 2
.如果 (是否中文系统)
    输出文本 (“检测能否自动创建房间(自动创建为服务器):”, 真, 真)
    输出文本 (“内部网络IP：”, 真, 真)
.否则
    输出文本 (“Start detecting whether the server can be created automatically on this machine:”, 真, 真)
    输出文本 (“Intranet IP:”, 真, 真)
.如果结束
内网IP ＝ 取内网IP ()
输出文本 (内网IP)
.如果 (是否中文系统)
    输出文本 (“路由网关IP：”, 真, 真)
.否则
    输出文本 (“Gateway IP:”, 真, 真)
.如果结束
网关IP ＝ 取网关IP ()
输出文本 (网关IP)
.如果 (是否中文系统)
    输出文本 (“使用公网IP：”, 真, 真)
.否则
    输出文本 (“Internet IP:”, 真, 真)
.如果结束
.如果真 (是否调试 或 外网IP ＝ “”)
    外网IP ＝ 取外网IP (, 是否调试)
.如果真结束
输出文本 (外网IP)
.如果 (是否中文系统)
    输出文本 (“路由获取IP：”, 真, 真)
.否则
    输出文本 (“Obtained by the router IP:”, 真, 真)
.如果结束
路由器获取到的IP ＝ 从路由器获取WAN口IP (网关IP)
.如果 (路由器获取到的IP ≠ “”)
    输出文本 (路由器获取到的IP)
.否则
    输出文本 (“失败,不支持NAT-PMP”)
.如果结束
.如果 (是否中文系统)
    输出文本 (“网络运营商：”, 真, 真)
.否则
    输出文本 (“Network provider:”, 真, 真)
.如果结束
当前运营商 ＝ 取运营商 (外网IP)
输出文本 (当前运营商)
.如果真 (是否内网IP (路由器获取到的IP) 且 路由器获取到的IP ≠ 外网IP 且 路由器获取到的IP ≠ “”)
    .如果 (是否中文系统)
        输出文本 (“路由获取到的IP与实际使用不同,可能此网络没有公网IP”, 假, 真)
    .否则
        输出文本 (“The IP address obtained by the router is different from the actual one. The current network may not have a public IP address.”, 假, 真)
    .如果结束

.如果真结束
.如果真 (外网IP ＝ “”)
    .如果 (是否中文系统)
        输出文本 (#换行符 ＋ “无法获取外网IP，无法自动创建房间，请确认您是否已联网”)
    .否则
        输出文本 (#换行符 ＋ “Unable to get internet IP address, can't create server automatically, please confirm if you are connected to the internet”)
    .如果结束
    是否检测中 ＝ 假
    返回 ()
.如果真结束
.计次循环首 (测试次数, 已次数)
    置随机数种子 ()
    .如果真 (已次数 ≠ 1)
        移除upnp (创建端口, “TCP”)
    .如果真结束
    .如果 (已次数 ＝ 测试次数)
        创建端口 ＝ 26576
    .否则
        创建端口 ＝ 取随机数 (10001, 32767)
    .如果结束
    .如果 (是否中文系统)
        输出文本 (#换行符 ＋ “创建” ＋ 外网IP ＋ “:” ＋ 到文本 (创建端口) ＋ “的NAT-PMP映射：”)
    .否则
        输出文本 (#换行符 ＋ “Create NAT-PMP port mapping to ” ＋ 外网IP ＋ “:” ＋ 到文本 (创建端口))
    .如果结束
    是否为NATPMP ＝ 真
    创建结果 ＝ NATPMP创建映射 (网关IP, “TCP”, 26576, 创建端口, 3600)
    .如果真 (创建结果 ≠ 0)
        .如果真 (创建结果 ≠ 创建端口)
            输出文本 (“警告:路由器实际映射端口” ＋ 到文本 (创建结果) ＋ “,改为此端口”, 假, 真)
            创建端口 ＝ 创建结果
        .如果真结束
        .如果 (路由器获取到的IP ≠ 外网IP 且 路由器获取到的IP ≠ “”)
            .如果 (是否中文系统)
                输出文本 (“可能失败”)
                输出文本 (#换行符 ＋ “原因：映射创建成功获取到内网IP，可能没有公网IP”)
            .否则
                输出文本 (“ Failed”)
                输出文本 (#换行符 ＋ “Cause: The mapping was successfully created but the intranet IP was obtained from the route. The router may not have a public IP address.”)
            .如果结束
            创建结果 ＝ -1
        .否则
            .如果 (是否中文系统)
                输出文本 (“创建成功”)
            .否则
                输出文本 (“ Success”)
            .如果结束
            创建结果 ＝ 1
        .如果结束
        加入成员 (全创建结果, 创建结果)
    .如果真结束
    .如果真 (创建结果 ＝ 0)
        加入成员 (全创建结果, 创建结果)
        .如果 (是否中文系统)
            输出文本 (“创建失败”)
        .否则
            输出文本 (“ Failed”)
        .如果结束
        .如果 (是否中文系统)
            输出文本 (#换行符 ＋ “创建” ＋ 外网IP ＋ “:” ＋ 到文本 (创建端口) ＋ “的UPnP映射(1)：”)
        .否则
            输出文本 (#换行符 ＋ “Create UPnP port mapping to ” ＋ 外网IP ＋ “:” ＋ 到文本 (创建端口))
        .如果结束
        是否为NATPMP ＝ 假
        创建结果 ＝ 创建upnp主线程 (创建端口, “TCP”, 26576, 内网IP, “GTASuperESC_” ＋ 到文本 (取随机数 (1000, 9999)), 1)
        加入成员 (全创建结果, 创建结果)
        .如果真 (创建结果 ＝ -1)
            .如果 (是否中文系统)
                输出文本 (“可能失败”)
                输出文本 (#换行符 ＋ “原因：映射创建成功获取到内网IP，可能没有公网IP”)
            .否则
                输出文本 (“ Failed”)
                输出文本 (#换行符 ＋ “Cause: The mapping was successfully created but the intranet IP was obtained from the route. The router may not have a public IP address.”)
            .如果结束

        .如果真结束
        .如果真 (创建结果 ＝ 1)
            .如果 (是否中文系统)
                输出文本 (“创建成功”)
            .否则
                输出文本 (“ Success”)
            .如果结束

        .如果真结束
        .如果真 (创建结果 ＝ 100 或 创建结果 ＝ 0)
            .如果 (是否中文系统)
                输出文本 (“创建失败”)
            .否则
                输出文本 (“ Failed”)
            .如果结束
            .如果 (是否中文系统)
                输出文本 (#换行符 ＋ “创建” ＋ 外网IP ＋ “:” ＋ 到文本 (创建端口) ＋ “的UPnP映射(2)：”)
            .否则
                输出文本 (#换行符 ＋ “Create UPnP port mapping to ” ＋ 外网IP ＋ “:” ＋ 到文本 (创建端口))
            .如果结束
            ' 调试输出 (“GTASESC”, 内网IP, “TCP”, 到文本 (26576), 到文本 (创建端口), “0”)
            创建结果 ＝ 创建upnp主线程 (创建端口, “TCP”, 26576, 内网IP, “GTASuperESC_” ＋ 到文本 (取随机数 (1000, 9999)), 2)
            .如果 (创建结果 ＝ 1)
                .如果 (是否中文系统)
                    输出文本 (“创建成功”)
                .否则
                    输出文本 (“ Success”)
                .如果结束
                加入成员 (全创建结果, -1)
                加入成员 (全创建结果, 1)
            .否则
                加入成员 (全创建结果, 0)
                .如果 (是否中文系统)
                    输出文本 (“创建失败”)
                    输出文本 (#换行符 ＋ “原因：路由器未开启UPnP与NAT-PMP，映射创建失败”)
                .否则
                    输出文本 (“ Failed”)
                    输出文本 (#换行符 ＋ “Cause: The router does not enable UPnP and NAT-PMP, and the mapping creation fails.”)
                .如果结束

            .如果结束

        .如果真结束

    .如果真结束
    延迟 (200)
    ' 输出文本 (#换行符 ＋ “测试是否可用：”)
    检测结果 ＝ 检查端口开放 (外网IP, 创建端口, 是否调试)
    .如果 (是否中文系统)
        输出文本 (“综合检测结果：”, 真, 真)
    .否则
        输出文本 (“Comprehensive test results:”, 真, 真)
    .如果结束
    .如果真 (检测结果 ＝ 1 或 检测结果 ＝ 10)
        .如果 (是否中文系统)
            .如果 (检测结果 ＝ 10)
                输出文本 (“应该可用”)
            .否则
                输出文本 (“可用”)
            .如果结束

        .否则
            .如果 (检测结果 ＝ 10)
                输出文本 (“Should be available”)
            .否则
                输出文本 (“Available”)
            .如果结束

        .如果结束
        .如果 (是否为NATPMP)
            NATPMP创建映射 (网关IP, “UDP”, 26576, 创建端口, 3600)
            NATPMP时钟.时钟周期 ＝ 1200 × 1000
            输出文本 (“已启用NAT-PMP自动续期”, 真, 真)
        .否则
            创建结果 ＝ 创建upnp主线程 (创建端口, “UDP”, 26576, 内网IP, “GTASuperESC_” ＋ 到文本 (取随机数 (1000, 9999)), 1)
            .如果真 (创建结果 ≠ 1 且 创建结果 ≠ -1)
                创建upnp主线程 (创建端口, “UDP”, 26576, 内网IP, “GTASuperESC_” ＋ 到文本 (取随机数 (1000, 9999)), 2)
            .如果真结束

        .如果结束
        按钮1.禁止 ＝ 假
        使用端口 ＝ 创建端口
        自动创建房间 ()
        跳出循环 ()
    .如果真结束
    .如果真 (检测结果 ＝ 0)
        .如果 (是否中文系统)
            输出文本 (“不可用”)
        .否则
            输出文本 (“Unavailable”)
        .如果结束
        .如果真 (已次数 ＝ 测试次数)
            输出文本 (#换行符 ＋ “”)
            .如果 (是否中文系统)
                输出文本 (#换行符 ＋ “自动创建房间(服务器)要求必须符合以下几点”)
            .否则
                输出文本 (#换行符 ＋ “The server could not be created automatically for the following reasons:”)
            .如果结束
            输出序号 ＝ 0
            是否存在 ＝ 假
            .计次循环首 (取数组成员数 (全创建结果), 内已次数)
                .如果真 (全创建结果 [内已次数] ＝ -1)
                    是否存在 ＝ 真
                .如果真结束

            .计次循环尾 ()
            .如果真 (是否存在)
                输出序号 ＝ 输出序号 ＋ 1
                .如果 (是否中文系统)
                    输出文本 (#换行符 ＋ 到文本 (输出序号) ＋ “.有公网IP，也就是说和不能别人共享IP，若没有自己”)
                    输出文本 (#换行符 ＋ “  单独的IP和别人共享IP，别人就不能主动连接你，也”)
                    输出文本 (#换行符 ＋ “  就是说不能自动创建为服务器，所以自动创建会失败”)
                    输出文本 (#换行符 ＋ “  (刚开始测试时显示的公网IP不一定是你自己独享的)”)
                    输出文本 (#换行符 ＋ “  无公网IP可投诉运营商,若投诉没用可到工信部投诉”)
                    输出文本 (#换行符 ＋ “  工信部投诉后不给解决扣工资,所以工信部投诉很管用”)
                .否则
                    输出文本 (#换行符 ＋ “No public internet IP, please contact your network provider”)
                .如果结束

            .如果真结束
            是否存在 ＝ 假
            .计次循环首 (取数组成员数 (全创建结果), 内已次数)
                .如果真 (全创建结果 [内已次数] ＝ 0 或 全创建结果 [内已次数] ＝ 100)
                    是否存在 ＝ 真
                .如果真结束
                .如果真 (全创建结果 [内已次数] ＝ 1 或 全创建结果 [内已次数] ＝ -1)
                    是否存在 ＝ 假
                    跳出循环 ()
                .如果真结束

            .计次循环尾 ()
            .如果真 (是否存在)
                输出序号 ＝ 输出序号 ＋ 1
                .如果 (是否中文系统)
                    输出文本 (#换行符 ＋ 到文本 (输出序号) ＋ “.路由器没有开启UPnP与NAT-PMP功能，请在路由器设置”)
                    输出文本 (#换行符 ＋ “  中打开UPnP或NAT-PMP，不然无法自动创建端口映射！”)
                .否则
                    输出文本 (#换行符 ＋ “The UPnP mapping failed to be created, possibly because the router does not enable UPnP mapping, or the system does not support UPnP mapping.”)
                .如果结束

            .如果真结束
            是否存在 ＝ 假
            .计次循环首 (取数组成员数 (全创建结果), 内已次数)
                .如果真 (全创建结果 [内已次数] ＝ 1)
                    是否存在 ＝ 真
                .如果真结束

            .计次循环尾 ()
            .如果真 (内网IP ＝ 外网IP)
                是否存在 ＝ 真
            .如果真结束
            .如果真 (是否存在)
                输出序号 ＝ 输出序号 ＋ 1
                .如果 (是否中文系统)
                    输出文本 (#换行符 ＋ 到文本 (输出序号) ＋ “.网络的连接类型设为专用(家庭/单位那个信任的网络)”)
                    输出文本 (#换行符 ＋ “  且防火墙提示时勾选允许访问再确定,不然防火墙拦截”)
                    输出文本 (#换行符 ＋ “  软件会创建失败,若已拦截可给软件改文件名重新打开”)
                .否则
                    输出文本 (#换行符 ＋ “Firewall blocking, please check if your network connection type is set to home or work network, and check the Allow access and click OK in the pop-up Windows Firewall window.”)
                .如果结束

            .如果真结束
            输出文本 (#换行符 ＋ “”)
            .如果 (是否中文系统)
                输出文本 (#换行符 ＋ “ 若您不会解决上面问题，可使用一键创建房间，一键”)
                输出文本 (#换行符 ＋ “ 创建房间适用任意网络，只是延迟稍高(日本服务器)”)
                输出文本 (#换行符 ＋ “ 也可使用内网穿透手动创建房间,操作比较简单,教程:”)
                输出文本 (#换行符 ＋ “ https://wgzeyu.gtxcn.com/GTASuperESC/video.mp4”)
                输出文本 (#换行符 ＋ “ https://www.bilibili.com/video/av28899499/?p=2”)
                输出文本 (#换行符 ＋ “ 若www.natfrp.org打不开,可在上方B站里选集切换教程”)
                ' 载入 (窗口1, _启动窗口, 真)  ' 之前那个改信息框按钮标题的竟然只在调试时有效。。
            .否则
                输出文本 (#换行符 ＋ “Alternatively, you can use port mapping or intranet penetration (such as Ngrok or Frp) to manually create the server.”)
                输出文本 (#换行符 ＋ “If you don't know how to deal with these problems, you can use the free server directly.”)
            .如果结束

        .如果真结束
        ' 注销upnp ()
        .如果 (是否为NATPMP)
            NATPMP创建映射 (网关IP, “TCP”, 26576, 创建端口, 0)
        .否则
            移除upnp (创建端口, “TCP”)
            删除UPnP映射 (“TCP”, 到文本 (创建端口))
        .如果结束

    .如果真结束
    .如果真 (检测结果 ＝ 100)
        .如果 (是否中文系统)
            输出文本 (“检测失败”)
        .否则
            输出文本 (“Detection failure”)
        .如果结束
        .如果 (是否为NATPMP)
            NATPMP创建映射 (网关IP, “TCP”, 26576, 创建端口, 0)
        .否则
            移除upnp (创建端口, “TCP”)
            删除UPnP映射 (“TCP”, 到文本 (创建端口))
        .如果结束

    .如果真结束

.计次循环尾 ()
是否检测中 ＝ 假

.子程序 创建upnp, 整数型, , 0=失败，1=成功，-1=内网IP
.参数 映射端口, 整数型
.参数 协议, 文本型
.参数 本地端口, 整数型
.参数 本地IP, 文本型
.参数 描述, 文本型
.局部变量 upnpnat, 对象
.局部变量 执行结果, 对象

upnpnat.创建 (“{AE1E00AA-3FD5-403C-8A27-2BBDC30CD0E1}”, )
执行结果 ＝ upnpnat.读对象型属性 (“StaticPortMappingCollection”, ).对象型方法 (“Add”, 映射端口, 协议, 本地端口, 本地IP, 真, 描述)
.如果真 (执行结果.读逻辑属性 (“Enabled”, ) ＝ 假)
    返回 (0)
.如果真结束
.如果真 (是否内网IP (执行结果.读文本属性 (“ExternalIPAddress”, )))
    返回 (-1)
.如果真结束
返回 (1)
调试输出 (执行结果.读文本属性 (“ExternalIPAddress”, ))
调试输出 (执行结果.读数值属性 (“ExternalPort”, ))
调试输出 (执行结果.读数值属性 (“InternalPort”, ))
调试输出 (执行结果.读文本属性 (“Protocol”, ))
调试输出 (执行结果.读文本属性 (“InternalClient”, ))
调试输出 (执行结果.读逻辑属性 (“Enabled”, ))
调试输出 (执行结果.读文本属性 (“Description”, ))

.子程序 移除upnp
.参数 映射端口, 整数型
.参数 协议, 文本型
.局部变量 upnpnat, 对象

upnpnat.创建 (“{AE1E00AA-3FD5-403C-8A27-2BBDC30CD0E1}”, )
upnpnat.读对象型属性 (“StaticPortMappingCollection”, ).对象型方法 (“Remove”, 映射端口, 协议)

.子程序 是否内网IP, 逻辑型
.参数 检查IP, 文本型
.局部变量 全IP段, 文本型, , "0"
.局部变量 已次数, 整数型
.局部变量 当前IP, 文本型
.局部变量 当前子网, 整数型

全IP段 ＝ 分割文本 (#全部内网IP, #换行符, )
.计次循环首 (取数组成员数 (全IP段), 已次数)
    当前IP ＝ 文本_取出中间文本 (“@” ＋ 全IP段 [已次数], “@”, “/”)
    当前子网 ＝ 到整数 (文本_取出中间文本 (全IP段 [已次数] ＋ “@”, “/”, “@”))
    .如果真 (比对所有IP (当前IP, 数字转子网掩码 (当前子网), 检查IP))
        返回 (真)
    .如果真结束

.计次循环尾 ()
返回 (假)

.子程序 比对所有IP, 逻辑型
.参数 IP地址, 文本型
.参数 子网掩码, 文本型
.参数 要对比的IP, 文本型
.局部变量 全子网, 整数型, , "0"
.局部变量 全IP, 整数型, , "0"
.局部变量 比对IP, 整数型, , "0"
.局部变量 全已次数, 整数型, , "4"
.局部变量 临时数组, 文本型, , "0"
.局部变量 已次数, 整数型
.局部变量 重合次数, 整数型

临时数组 ＝ 分割文本 (子网掩码, “.”, )
.如果真 (取数组成员数 (临时数组) ≠ 4)
    返回 (假)
.如果真结束
.计次循环首 (4, 已次数)
    加入成员 (全子网, 到整数 (临时数组 [已次数]))
.计次循环尾 ()
清除数组 (临时数组)
临时数组 ＝ 分割文本 (IP地址, “.”, )
.如果真 (取数组成员数 (临时数组) ≠ 4)
    返回 (假)
.如果真结束
.计次循环首 (4, 已次数)
    加入成员 (全IP, 到整数 (临时数组 [已次数]))
.计次循环尾 ()
清除数组 (临时数组)
临时数组 ＝ 分割文本 (要对比的IP, “.”, )
.如果真 (取数组成员数 (临时数组) ≠ 4)
    返回 (假)
.如果真结束
.计次循环首 (4, 已次数)
    加入成员 (比对IP, 到整数 (临时数组 [已次数]))
.计次循环尾 ()
清除数组 (临时数组)
重合次数 ＝ 0
.计次循环首 (4, 已次数)
    .如果 (比对IP [已次数] ≥ 全IP [已次数] 且 比对IP [已次数] ≤ 全IP [已次数] ＋ 255 － 全子网 [已次数])

    .否则
        返回 (假)
    .如果结束

.计次循环尾 ()
返回 (真)

.子程序 数字转子网掩码, 文本型
.参数 数字子网掩码, 整数型
.局部变量 二进制文本, 文本型
.局部变量 子网掩码, 文本型

.如果真 (数字子网掩码 ＞ 32 或 数字子网掩码 ＜ 0)
    返回 (“”)
.如果真结束
.计次循环首 (数字子网掩码, )
    二进制文本 ＝ 二进制文本 ＋ “1”
.计次循环尾 ()
.计次循环首 (32 － 数字子网掩码, )
    二进制文本 ＝ 二进制文本 ＋ “0”
.计次循环尾 ()
子网掩码 ＝ 子网掩码 ＋ 到文本 (进制_二到十 (取文本中间 (二进制文本, 1 ＋ 8 × 0, 8))) ＋ “.”
子网掩码 ＝ 子网掩码 ＋ 到文本 (进制_二到十 (取文本中间 (二进制文本, 1 ＋ 8 × 1, 8))) ＋ “.”
子网掩码 ＝ 子网掩码 ＋ 到文本 (进制_二到十 (取文本中间 (二进制文本, 1 ＋ 8 × 2, 8))) ＋ “.”
子网掩码 ＝ 子网掩码 ＋ 到文本 (进制_二到十 (取文本中间 (二进制文本, 1 ＋ 8 × 3, 8)))
返回 (子网掩码)

.子程序 检查端口开放, 整数型, , 0=失败1=成功10=可能成功100=查询失败
.参数 IPc, 文本型
.参数 端口c, 整数型
.参数 调试, 逻辑型, 可空, 为真时把所有网站都测试一次
.局部变量 全网站, 文本型, , "0"
.局部变量 已次数, 整数型
.局部变量 当前网站, 文本型
.局部变量 访问的, 字节集
.局部变量 访问结果, 文本型
.局部变量 toolcookies, 文本型
.局部变量 访问方式, 整数型
.局部变量 成功次数, 整数型
.局部变量 失败次数, 整数型
.局部变量 未知次数, 整数型
.局部变量 此次成功, 逻辑型
.局部变量 计时a, 长整数型
.局部变量 HTTP状态, 整数型
.局部变量 全失败信息, 文本型, , "0"
.局部变量 内已次数, 整数型
.局部变量 此次失败, 逻辑型

' <0>编码<1>提交方式<2>提交地址<3>提交信息<4>成功信息<5>失败信息<#>第二个失败信息(可不写<#>与第二个)<6>cookie验证地址<7>超时时间(秒)<8>输出信息<9>
.如果 (获取全端口扫描服务器 ≠ “”)
    全网站 ＝ 分割文本 (获取全端口扫描服务器, #换行符, )
.否则
    全网站 ＝ 分割文本 (#端口测试网站, #换行符, )
    调试输出 (“警告，从本地获取端口扫描网站”)
.如果结束
.计次循环首 (取数组成员数 (全网站), 已次数)
    此次成功 ＝ 假
    toolcookies ＝ “”
    当前网站 ＝ 文本_替换 (全网站 [已次数], , , , “[IP地址]”, IPc, “[端口]”, 到文本 (端口c))
    .如果真 (快速取出现次数 (当前网站, “<1>”) ＝ 0)
        到循环尾 ()
    .如果真结束
    .如果 (是否中文系统)
        输出文本 (#换行符 ＋ 文本_取出中间文本 (当前网站, “<8>”, “<9>”))
    .否则
        输出文本 (#换行符 ＋ “Test the native server using ” ＋ 网页_取域名 (文本_取出中间文本 (当前网站, “<2>”, “<3>”), 真) ＋ “'s port scan:”)
    .如果结束
    调试输出 (文本_取出中间文本 (当前网站, “<8>”, “<9>”))
    .如果真 (文本_取出中间文本 (当前网站, “<6>”, “<7>”) ≠ “”)
        计时a ＝ 到长整数 (时间_取现行时间戳 ())
        网页_访问_对象 (文本_取出中间文本 (当前网站, “<6>”, “<7>”), , , , toolcookies, , , , , , , 2)
        调试输出 (“获取cookie耗时” ＋ 到文本 (到长整数 (时间_取现行时间戳 ()) － 计时a))
    .如果真结束
    访问方式 ＝ 0
    .如果真 (文本_取出中间文本 (当前网站, “<1>”, “<2>”) ＝ “POST”)
        访问方式 ＝ 1
    .如果真结束
    计时a ＝ 到长整数 (时间_取现行时间戳 ())
    访问的 ＝ 网页_访问_对象 (文本_取出中间文本 (当前网站, “<2>”, “<3>”), 访问方式, 文本_取出中间文本 (当前网站, “<3>”, “<4>”), toolcookies, , , , HTTP状态, , , , 到整数 (文本_取出中间文本 (当前网站, “<7>”, “<8>”)))
    调试输出 (“访问耗时” ＋ 到文本 (到长整数 (时间_取现行时间戳 ()) － 计时a))
    .如果 (文本_取出中间文本 (当前网站, “<0>”, “<1>”) ＝ “ANSI”)
        访问结果 ＝ 到文本 (访问的)
    .否则
        访问结果 ＝ 编码_Utf8到Ansi (访问的)
    .如果结束
    .如果真 (快速取出现次数 (访问结果, 文本_取出中间文本 (当前网站, “<4>”, “<5>”)) ≠ 0)
        成功次数 ＝ 成功次数 ＋ 1
        此次成功 ＝ 真
        .如果 (是否中文系统)
            输出文本 (“可用”)
        .否则
            输出文本 (“Available”)
        .如果结束
        调试输出 (“可用”)
    .如果真结束
    清除数组 (全失败信息)
    全失败信息 ＝ 分割文本 (文本_取出中间文本 (当前网站, “<5>”, “<6>”), “<#>”, )
    此次失败 ＝ 假
    .计次循环首 (取数组成员数 (全失败信息), 内已次数)
        .如果真 (快速取出现次数 (访问结果, 全失败信息 [内已次数]) ≠ 0)
            此次失败 ＝ 真
        .如果真结束

    .计次循环尾 ()
    .如果真 (此次失败)
        失败次数 ＝ 失败次数 ＋ 1
        此次成功 ＝ 真
        .如果 (是否中文系统)
            输出文本 (“不可用”)
        .否则
            输出文本 (“Unavailable”)
        .如果结束
        调试输出 (“不可用”)
    .如果真结束
    .如果真 (此次成功 ＝ 假)
        未知次数 ＝ 未知次数 ＋ 1
        调试输出 (访问结果)
        .如果 (HTTP状态 ＝ 200)
            .如果 (是否中文系统)
                输出文本 (“无法检测”)
            .否则
                输出文本 (“Unable to detect”)
            .如果结束
            调试输出 (“无法检测”)
        .否则
            .如果 (是否中文系统)
                输出文本 (“检测失败”)
            .否则
                输出文本 (“Detection failure”)
            .如果结束
            调试输出 (“检测失败”)
        .如果结束

    .如果真结束
    .如果真 (成功次数 ≥ 2 且 调试 ＝ 假)
        返回 (1)
    .如果真结束
    .如果真 (失败次数 ≥ 2 且 调试 ＝ 假)
        返回 (0)
    .如果真结束

.计次循环尾 ()
.如果真 (调试)
    .如果真 (成功次数 ≥ 2)
        返回 (1)
    .如果真结束
    .如果真 (失败次数 ≥ 2)
        返回 (0)
    .如果真结束

.如果真结束
.如果真 (失败次数 ＝ 1 且 成功次数 ＝ 0)
    返回 (0)
.如果真结束
.如果真 (成功次数 ＝ 1)
    返回 (10)
.如果真结束
返回 (100)

.子程序 快速取出现次数, 整数型
.参数 全部文本, 文本型
.参数 要找的文本, 文本型
.局部变量 全部内容, 快速文本对象

全部内容.置文本 (全部文本)
返回 (全部内容.替换子文本 (要找的文本, “”, , , 真))

.子程序 取外网IP, 文本型
.参数 快速, 逻辑型, 可空
.参数 调试, 逻辑型, 可空
.局部变量 全网站, 文本型, , "0"
.局部变量 已次数, 整数型
.局部变量 当前网站, 文本型
.局部变量 访问结果, 文本型
.局部变量 返回状态, 整数型
.局部变量 访问结果字节集, 字节集
.局部变量 访问方式, 整数型
.局部变量 取出IP, 文本型

.如果 (获取全检测IP服务器 ≠ “”)
    全网站 ＝ 分割文本 (获取全检测IP服务器, #换行符, )
.否则
    全网站 ＝ 分割文本 (#检测公网IP网站, #换行符, )
    调试输出 (“警告，从本地读取外网IP服务器”)
.如果结束
.计次循环首 (取数组成员数 (全网站), 已次数)
    当前网站 ＝ 全网站 [已次数]
    .如果真 (快速取出现次数 (当前网站, “<1>”) ＝ 0)
        到循环尾 ()
    .如果真结束
    .如果真 (快速 ＝ 真 且 到逻辑型 (文本_取出中间文本 (当前网站, “<7>”, “<8>”)) ＝ 假)
        到循环尾 ()
    .如果真结束
    .如果 (到大写 (文本_取出中间文本 (当前网站, “<1>”, “<2>”)) ＝ “GET”)
        访问方式 ＝ 0
    .否则
        访问方式 ＝ 1
    .如果结束
    访问结果字节集 ＝ 网页_访问_对象 (文本_取出中间文本 (当前网站, “<2>”, “<3>”), 访问方式, 文本_取出中间文本 (当前网站, “<3>”, “<4>”), , , , , 返回状态, , , , 到整数 (文本_取出中间文本 (当前网站, “<6>”, “<7>”)))
    .如果 (到大写 (文本_取出中间文本 (当前网站, “<0>”, “<1>”)) ＝ “GBK”)
        访问结果 ＝ 到文本 (访问结果字节集)
    .否则
        访问结果 ＝ 编码_Utf8到Ansi (访问结果字节集)
    .如果结束
    .如果真 (返回状态 ≠ 200)
        调试输出 (文本_取出中间文本 (当前网站, “<8>”, “<9>”) ＋ “服务器返回状态不是200”, 取文本左边 (文本_替换 (访问结果, , , , #换行符, “[换行]”), 200))
        到循环尾 ()
    .如果真结束
    .如果 (文本_取出中间文本 (当前网站, “<4>”, “<5>”) ＝ “”)
        取出IP ＝ 访问结果
    .否则
        取出IP ＝ 文本_取出中间文本 (访问结果, 文本_取出中间文本 (当前网站, “<4>”, “<5>”), 文本_取出中间文本 (当前网站, “<5>”, “<6>”))
    .如果结束
    .如果真 (取出IP ＝ “”)
        调试输出 (文本_取出中间文本 (当前网站, “<8>”, “<9>”) ＋ “服务器获取不到IP”, 取文本左边 (文本_替换 (访问结果, , , , #换行符, “[换行]”), 200))
        到循环尾 ()
    .如果真结束
    .如果 (是否为IPv4地址 (取出IP))
        调试输出 (文本_取出中间文本 (当前网站, “<8>”, “<9>”) ＋ “服务器获取到IP” ＋ 取出IP)
        .如果真 (调试 ＝ 假)
            返回 (取出IP)
        .如果真结束

    .否则
        调试输出 (文本_取出中间文本 (当前网站, “<8>”, “<9>”) ＋ “服务器获取到的不是IPv4地址”, 取出IP)
        到循环尾 ()
    .如果结束
    .如果真 (调试)
        .如果真 (取数组成员数 (全网站) ＝ 已次数)
            返回 (取出IP)
        .如果真结束

    .如果真结束

.计次循环尾 ()
返回 (“”)

.子程序 取内网IP, 文本型
.局部变量 全IP, 文本型, , "0"
.局部变量 已次数, 整数型
.局部变量 IP1, 文本型

IP1 ＝ 转换为IP地址 (“”)
.如果真 (取文本左边 (IP1, 8) ＝ “192.168.” 或 取文本左边 (IP1, 3) ＝ “10.”)
    返回 (IP1)
.如果真结束
全IP ＝ 取本机IP ()
.计次循环首 (取数组成员数 (全IP), 已次数)
    调试输出 (“本机IP”, 全IP [已次数])
    .如果真 (是否内网IP (全IP [已次数]))
        .如果真 (取文本左边 (全IP [已次数], 8) ＝ “192.168.” 或 取文本左边 (全IP [已次数], 3) ＝ “10.”)
            返回 (全IP [已次数])
        .如果真结束

    .如果真结束

.计次循环尾 ()
.计次循环首 (取数组成员数 (全IP), 已次数)
    .如果真 (是否内网IP (全IP [已次数]) 且 取文本左边 (全IP [已次数], 8) ≠ “169.254.” 且 取文本左边 (全IP [已次数], 8) ≠ “127.0.0.”)
        返回 (全IP [已次数])
    .如果真结束

.计次循环尾 ()
.计次循环首 (取数组成员数 (全IP), 已次数)
    .如果真 (是否内网IP (全IP [已次数]))
        返回 (全IP [已次数])
    .如果真结束

.计次循环尾 ()
.如果真 (IP1 ≠ “”)
    返回 (IP1)
.如果真结束
.如果真 (取数组成员数 (全IP) ＞ 0)
    返回 (全IP [1])
.如果真结束
返回 (“”)

.子程序 获取网络信息, 逻辑型
.局部变量 读取内容, 文本型
.局部变量 全部内容, 文本型, , "0"
.局部变量 当前内容, 文本型
.局部变量 已次数, 整数型
.局部变量 当前网络, 网络信息

.如果真 (取数组成员数 (网络详情) ≠ 0)
    返回 (真)
.如果真结束
运行 (“cmd /c netsh interface show interface >>” ＋ #引号 ＋ 取运行目录 () ＋ “\jgDxPv4cFgeTU3K9.txt” ＋ #引号, 真, 3)
读取内容 ＝ 到文本 (读入文件 (取运行目录 () ＋ “\jgDxPv4cFgeTU3K9.txt”))
删除文件 (取运行目录 () ＋ “\jgDxPv4cFgeTU3K9.txt”)
读取内容 ＝ 文本_替换 (读取内容, , , , “-------------------------------------------------------------------------”, #换行符, “  ”, “ ”, “  ”, “ ”, “  ”, “ ”, #换行符 ＋ #换行符, “”)
读取内容 ＝ 文本_替换 (读取内容, , , , “---”, “”, “  ”, “ ”, “--”, “”, “   ”, “ ”, “--”, “”)
读取内容 ＝ 文本_替换 (“<>” ＋ 读取内容, , , , “<>” ＋ #换行符, “”, “<>”, “”, “  ”, “ ”, “-”, “”, “  ”, “ ”)
全部内容 ＝ 分割文本 (读取内容, #换行符, )
.如果真 (取数组成员数 (全部内容) ＞ 1)
    .计次循环首 (取数组成员数 (全部内容) － 1, 已次数)
        当前内容 ＝ 全部内容 [已次数 ＋ 1]
        .如果真 (快速取出现次数 (当前内容, “ ”) ＝ 3)
            当前网络.管理员状态 ＝ 文本_取出中间文本 (“<>” ＋ 当前内容, “<>”, “ ”)
            当前内容 ＝ 文本_替换 (“<>” ＋ 当前内容, , , , “<>” ＋ 当前网络.管理员状态 ＋ “ ”, “”)
            当前网络.状态 ＝ 文本_取出中间文本 (“<>” ＋ 当前内容, “<>”, “ ”)
            当前内容 ＝ 文本_替换 (“<>” ＋ 当前内容, , , , “<>” ＋ 当前网络.状态 ＋ “ ”, “”)
            当前网络.类型 ＝ 文本_取出中间文本 (“<>” ＋ 当前内容, “<>”, “ ”)
            当前网络.接口名称 ＝ 文本_替换 (“<>” ＋ 当前内容, , , , “<>” ＋ 当前网络.类型 ＋ “ ”, “”)
            加入成员 (网络详情, 当前网络)
        .如果真结束

    .计次循环尾 ()
.如果真结束
.如果真 (取数组成员数 (网络详情) ＝ 0)
    返回 (假)
.如果真结束
返回 (真)

.子程序 _创建upnp时钟_周期事件

创建upnp时钟.时钟周期 ＝ 0
.如果 (传递_版本 ＝ 1)
    UPnP创建结果 ＝ 创建upnp (传递_创建端口, 传递_协议, 传递_本地端口, 取内网IP (), 传递_描述)
.否则
    调试输出 (传递_描述, 取内网IP (), 传递_协议, 到文本 (传递_本地端口), 到文本 (传递_创建端口), “0”)
    .如果 (添加UPnP映射 (传递_描述, 取内网IP (), 传递_协议, 到文本 (传递_创建端口), 到文本 (传递_本地端口), “0”) ＝ 真)
        UPnP创建结果 ＝ 1
    .否则
        UPnP创建结果 ＝ 0
    .如果结束

.如果结束



.子程序 创建upnp主线程, 整数型
.参数 映射端口a, 整数型
.参数 协议a, 文本型
.参数 本地端口a, 整数型
.参数 本地IPa, 文本型
.参数 描述a, 文本型
.参数 版本a, 整数型
.局部变量 创建开始时间, 长整数型

传递_描述 ＝ 描述a
传递_创建端口 ＝ 映射端口a
传递_本地端口 ＝ 本地端口a
传递_协议 ＝ 协议a
传递_版本 ＝ 版本a
UPnP创建结果 ＝ 100
创建upnp时钟.时钟周期 ＝ 10
创建开始时间 ＝ 到长整数 (时间_取现行时间戳 ())
.循环判断首 ()
    延时 (1)
.循环判断尾 (UPnP创建结果 ＝ 100 且 到长整数 (时间_取现行时间戳 ()) － 创建开始时间 ＜ 5000)
返回 (UPnP创建结果)

.子程序 干掉GTA
.参数 是否广播, 逻辑型, 可空
.局部变量 全部进程名, 文本型, , "0"
.局部变量 已次数, 整数型
.局部变量 是否等待, 逻辑型
.局部变量 此次发送数据, 字节集
.局部变量 计时, 长整数型

.如果真 (到长整数 (时间_取现行时间戳 ()) － 上次干掉时间 ＜ 500)  ' 0.5秒内不重复执行
    .如果 (是否中文系统)
        输出文本 (“干掉GTA:0.5秒内已执行过，不重复执行”, 真, 真)
    .否则
        输出文本 (“Kill GTA:Executed within 0.5 seconds, no repeated execution”, 真, 真)
    .如果结束
    返回 ()
.如果真结束
上次干掉时间 ＝ 到长整数 (时间_取现行时间戳 ())
.如果 (是否中文系统)
    输出文本 (“干掉GTA:开始执行”, 真, 真)
.否则
    输出文本 (“Kill GTA:Start execution”, 真, 真)
.如果结束

.如果真 (选择框2.选中)
    全部进程名 ＝ 分割文本 (文本_替换 (编辑框6.内容, , , 假, “，”, “,”, “.exe ”, “.exe,”, “|”, “,”, “/”, “,”, “.exe+”, “.exe,”), “,”, )
    .如果 (按钮2.禁止 且 是否广播)
        是否等待 ＝ 假
    .否则
        .如果 (选择框3.选中 且 选择框3.禁止 ＝ 假)
            是否等待 ＝ 假
        .否则
            是否等待 ＝ 真
        .如果结束

    .如果结束
    ' 终止进程 (“GTA5.exe”)
    .计次循环首 (取数组成员数 (全部进程名), 已次数)
        .如果 (进程_结束1 (全部进程名 [已次数]))
            .如果 (是否中文系统)
                输出文本 (“干掉GTA:成功结束” ＋ 全部进程名 [已次数] ＋ “进程”, 真, 真)
            .否则
                输出文本 (“Kill GTA:Successfully ended the ” ＋ 全部进程名 [已次数] ＋ “ process”, 真, 真)
            .如果结束

        .否则
            .如果 (进程_是否存在 (全部进程名 [已次数]))
                .如果 (是否中文系统)
                    输出文本 (“干掉GTA:结束” ＋ 全部进程名 [已次数] ＋ “进程失败，尝试使用taskkill强制结束”, 真, 真)
                .否则
                    输出文本 (“Kill GTA:Ending the ” ＋ 全部进程名 [已次数] ＋ “ process failed, try to use taskkill to force the end”, 真, 真)
                .如果结束
                运行 (“taskkill /f /im ” ＋ #引号 ＋ 全部进程名 [已次数] ＋ #引号, 是否等待, 3)
                .如果 (是否等待)
                    .如果 (是否中文系统)
                        .如果 (进程_是否存在 (全部进程名 [已次数]))
                            输出文本 (“干掉GTA:强制结束” ＋ 全部进程名 [已次数] ＋ “进程可能失败”, 真, 真)
                        .否则
                            输出文本 (“干掉GTA:成功强制结束” ＋ 全部进程名 [已次数] ＋ “进程”, 真, 真)
                        .如果结束

                    .否则
                        .如果 (进程_是否存在 (全部进程名 [已次数]))
                            输出文本 (“Kill GTA:Forced termination of the ” ＋ 全部进程名 [已次数] ＋ “ process maybe failed”, 真, 真)
                        .否则
                            输出文本 (“Kill GTA:Forced termination of the ” ＋ 全部进程名 [已次数] ＋ “ process successfully”, 真, 真)
                        .如果结束

                    .如果结束

                .否则
                    .如果 (是否中文系统)
                        输出文本 (“干掉GTA:为节省时间,不等待taskkill命令执行完毕开始执行下一项”, 真, 真)
                    .否则
                        输出文本 (“Kill GTA:In order to save time, no longer wait for the taskkill command to complete, directly start the next item”, 真, 真)
                    .如果结束

                .如果结束

            .否则
                .如果 (是否中文系统)
                    输出文本 (“干掉GTA:进程” ＋ 全部进程名 [已次数] ＋ “本来就不存在”, 真, 真)
                .否则
                    输出文本 (“Kill GTA:The process ” ＋ 全部进程名 [已次数] ＋ “ does not exist”, 真, 真)
                .如果结束

            .如果结束


        .如果结束

    .计次循环尾 ()
.如果真结束
.如果真 (选择框7.选中 且 选择框7.禁止 ＝ 假)
    .如果 (是否中文系统)
        输出文本 (“干掉GTA:开始执行进程断网”, 真, 真)
    .否则
        输出文本 (“Kill GTA:Start disconnecting the process's network”, 真, 真)
    .如果结束
    进程断网 (编辑框7.内容)
.如果真结束
.如果真 (按钮2.禁止 且 是否广播)
    .如果 (继续接收ID ≠ 0)
        此次发送数据 ＝ 封装数据 (“KILLGTA”, 加密秘钥)
        ' 计时 ＝ 到长整数 (时间_取现行时间戳 ())
        .计次循环首 (2, )
            发送数据 (此次发送数据, , 真)
        .计次循环尾 ()
        ' 调试输出 (到长整数 (时间_取现行时间戳 ()) － 计时, “发送三次耗时”)
    .否则
        发送数据 (封装数据 (“KILLGTA”, 加密秘钥), , 真)
        发送数据 (封装数据 (“KILLGTA”, 加密秘钥), , 真)
    .如果结束
    .如果 (是否中文系统)
        输出文本 (“干掉GTA:已发送两次数据到其他客户端”, 真, 真)
    .否则
        输出文本 (“Kill GTA:Data has been sent twice to other clients”, 真, 真)
    .如果结束

.如果真结束
.如果真 (选择框3.选中 且 选择框3.禁止 ＝ 假)
    .如果真 (按钮2.禁止 且 是否广播 且 是否关闭服务器 ＝ 假)
        程序_延时 (400)
    .如果真结束
    .如果 (是否中文系统)
        输出文本 (“干掉GTA:开始执行禁用网卡”, 真, 真)
    .否则
        输出文本 (“Kill GTA:Start executing the disabled network card”, 真, 真)
    .如果结束
    禁用网卡 ()
.如果真结束


.子程序 强制结束进程, 逻辑型
.参数 目标进程名, 文本型

返回 (进程_强力结束进程 (进程_名取ID (目标进程名), 0))

.子程序 _按钮1_被单击

按钮1.禁止 ＝ 真
等待服务器获取结果 ()
.如果 (是否中文系统)
    编辑框1.内容 ＝ 转换编码 (“输出内容：”)
.否则
    编辑框1.内容 ＝ “Output content:”
.如果结束
启动线程 (&检测创建支持, , 测试句柄)

.子程序 等待服务器获取结果

.如果真 (获取服务器结果 ＝ 0)
    .如果 (是否中文系统)
        输出文本 (“正在等待获取联机所需的服务器信息。。”, 真, 真)
        输出文本 (“请不要重复点击按钮，等待执行完毕再操作”, 真, 真)
    .否则
        输出文本 (“Waiting for server information needed to get online”, 真, 真)
    .如果结束
    .循环判断首 ()
        延迟 (100)
        处理事件 ()
    .循环判断尾 (获取服务器结果 ＝ 0)
.如果真结束


.子程序 自动创建房间
.局部变量 房间号, 文本型
.局部变量 内网房间号, 文本型

' 创建服务器
加密秘钥 ＝ “”
.如果 (选择框1.选中 ＝ 真)
    加密秘钥 ＝ 生成随机密码 (128)
.否则
    加密秘钥 ＝ 生成随机密码 (8)
.如果结束
调试输出 (“使用端口”, 使用端口)
房间号 ＝ 外网IP ＋ “:” ＋ 到文本 (使用端口) ＋ “!” ＋ 加密秘钥
内网房间号 ＝ 内网IP ＋ “:26576!” ＋ 加密秘钥
UDP许可证 ＝ 创建进入许可证 ()
UDP数据报_创建 (26576)
房间号 ＝ “#” ＋ 编码_BASE64编码 (文本_加密c (房间号, “O42xiMVordM72pvE”))
.如果 (是否中文系统)
    置剪辑板文本 (“打开GTASuperESC，输入以下房间号点加入房间即可：” ＋ #换行符 ＋ 房间号 ＋ #换行符 ＋ “复制时别漏字，少一个或多一个字符都会无法连接！”)
    输出文本 (“ ”, 假, 真)
    输出文本 (“已成功自动创建房间(服务器)，”, 真, 真)
    输出文本 (#换行符 ＋ “内网房间号：” ＋ 内网房间号)
    输出文本 (#换行符 ＋ “房间号：” ＋ 房间号)
    输出文本 (#换行符 ＋ “已复制房间号到剪辑板,直接粘贴发送给对方就可以了!”)
    输出文本 (#换行符 ＋ “已复制房间号到剪辑板,直接粘贴发送给对方就可以了!”)
    输出文本 (#换行符 ＋ “已复制房间号到剪辑板,直接粘贴发送给对方就可以了!”)
    输出文本 (#换行符 ＋ “请注意千万不要公开发布房间号，以防被别人关游戏！”)
    输出文本 (#换行符 ＋ “并提醒对方别复制错，房间号少一个多一个字都不能连”)
.否则
    置剪辑板文本 (“Open GTASuperESC and enter the following number to connect:” ＋ #换行符 ＋ 房间号)
    输出文本 (#换行符 ＋ “The server has been successfully created automatically,” ＋ #换行符 ＋ “Intranet number: ” ＋ 内网房间号 ＋ #换行符 ＋ “Internet number: ” ＋ 房间号 ＋ #换行符 ＋ “Has been copied to the clip board, please do not publish it publicly, in case the game is closed by others in the middle of the game.”)
.如果结束

编辑框2.内容 ＝ 房间号
心跳包.时钟周期 ＝ 2000
UDP超时检测.时钟周期 ＝ 1000
连接后禁止各种组件 ()
选择框4.禁止 ＝ 真
调试输出 (房间号)

.子程序 生成随机密码, 文本型
.参数 生成位数, 整数型
.局部变量 全字符, 文本型
.局部变量 随机字符, 文本型, , "0"
.局部变量 已次数, 整数型
.局部变量 种子, 文本型
.局部变量 生成字符, 文本型
.局部变量 第几个, 整数型

全字符 ＝ “a.b.c.d.e.f.g.h.i.j.k.l.m.n.o.p.q.r.s.t.u.v.w.x.y.z”
全字符 ＝ 全字符 ＋ “.” ＋ 到大写 (全字符) ＋ “.1.2.3.4.5.6.7.8.9.0”
随机字符 ＝ 分割文本 (全字符, “.”, )
.计次循环首 (生成位数, 已次数)
    种子 ＝ 取文本右边 (时间_取现行时间戳 (), 5) ＋ 到文本 (取随机数 (1, 99999))
    置随机数种子 (到整数 (种子))
    第几个 ＝ 取随机数 (1, 取数组成员数 (随机字符))
    生成字符 ＝ 生成字符 ＋ 随机字符 [第几个]
.计次循环尾 ()
返回 (生成字符)

.子程序 __启动窗口_将被销毁

继续接收ID ＝ 0
.如果真 (是否关闭服务器 ＝ 假)
    .如果 (NATPMP时钟.时钟周期 ≠ 0)
        NATPMP创建映射 (网关IP, “TCP”, 26576, 使用端口, 0)
        NATPMP创建映射 (网关IP, “UDP”, 26576, 使用端口, 0)
    .否则
        移除upnp (使用端口, “TCP”)
        移除upnp (使用端口, “UDP”)
        删除UPnP映射 (“TCP”, 到文本 (使用端口))
        删除UPnP映射 (“UDP”, 到文本 (使用端口))
    .如果结束

.如果真结束
UDP数据报.关闭 ()
撤销热键 (取窗口句柄 (), 热键)
.如果真 (UDP许可证 ≠ 0)
    删除进入许可证 (UDP许可证)
.如果真结束
.如果真 (选择框3.选中 ＝ 真 且 选择框3.禁止 ＝ 假)
    启用网卡 ()
.如果真结束
.如果真 (选择框7.选中 ＝ 真 且 选择框7.禁止 ＝ 假)
    恢复进程断网 ()
.如果真结束


.子程序 _按钮12_被单击
.局部变量 ID随机数, 整数型
.局部变量 公网房间号, 文本型

.如果真 (按钮1.禁止 ＝ 假)
    .如果 (是否中文系统)
        输出文本 (“自动创建房间失败后才可使用一键创建房间！”, 真, 真)
    .否则
        输出文本 (“Free server can be used if the server is automatically created fails”, 真, 真)
    .如果结束
    返回 ()
.如果真结束
按钮12.禁止 ＝ 真
等待服务器获取结果 ()
输出文本 (“开始生成随机密码，若此时卡死请向作者反馈，重新打开软件后点提交反馈按钮，最好写上你的系统版本，系统怎么安装的，比如是不是GHOST精简版之类的，然后提供卡死时的截图”, 真, 真)
处理事件 ()
当前ID ＝ 生成随机密码 (6)
加密秘钥 ＝ “”
.如果 (选择框1.选中 ＝ 真)
    加密秘钥 ＝ 生成随机密码 (128)
.否则
    加密秘钥 ＝ 生成随机密码 (32)
.如果结束
公网房间号 ＝ “?” ＋ 当前ID ＋ “!” ＋ 加密秘钥
编辑框1.内容 ＝ 转换编码 (“输出内容：”)
处理事件 ()
.如果 (WS创建连接 ())
    .如果 (是否中文系统)
        置剪辑板文本 (“使用不低于v3.6版GTASuperESC输入以下房间号加入：” ＋ #换行符 ＋ 公网房间号 ＋ #换行符 ＋ “复制时别漏字，少一个或多一个字符都会无法连接！”)
        输出文本 (“ ”, 假, 真)
        输出文本 (“一键创建房间(连接服务器)成功，”, 真, 真)
        输出文本 (“房间号：” ＋ 公网房间号, 假, 真)
        输出文本 (“已复制房间号到剪辑板,直接粘贴发送给对方就可以了!”, 假, 真)
        输出文本 (“已复制房间号到剪辑板,直接粘贴发送给对方就可以了!”, 假, 真)
        输出文本 (“已复制房间号到剪辑板,直接粘贴发送给对方就可以了!”, 假, 真)
        输出文本 (“已复制房间号到剪辑板,直接粘贴发送给对方就可以了!”, 假, 真)
        输出文本 (“注意软件版本不低于v3.6才能连接刚刚一键创建的房间”, 假, 真)
        输出文本 (“并注意千万不要公开发布房间号，以防被别人关游戏！”, 假, 真)
        输出文本 (“并提醒对方别复制错，房间号少一个多一个字都不能连”, 假, 真)
        输出文本 (“一键创建房间是连接软件作者提供的日本服务器，”, 假, 真)
        输出文本 (“而不是自己创建为服务器，因为当前网络不支持。。”, 假, 真)
        输出文本 (“缺点是延迟稍高，延迟可看上面的测试结果，按键”, 假, 真)
        输出文本 (“后对方收到并执行的延迟为:(你的延迟+对方延迟)÷2”, 假, 真)
        输出文本 (“若有人能自动创建最好用他自动创建，延迟更低更稳定”, 假, 真)
        输出文本 (“ ”, 假, 真)
    .否则
        输出文本 (“Successful server connection,the number has been copied to the clip board,” ＋ #换行符 ＋ “Number: ” ＋ 公网房间号 ＋ #换行符 ＋ “Note: The server provided by the software author is in Japan, after Cloudflare, so the delay is relatively high, and the software version is not lower than v3.6 to connect.”, 假, 真)
        置剪辑板文本 (“Connect to the following number using GTASuperESC no lower than v3.6:” ＋ #换行符 ＋ 公网房间号)
    .如果结束
    编辑框2.内容 ＝ 公网房间号
    心跳包周期 ＝ 25000
    上次接收时间 ＝ 到长整数 (时间_取现行时间戳 ())
    心跳包检测.时钟周期 ＝ 1000
    连接后禁止各种组件 ()
    选择框4.禁止 ＝ 真
    启动线程 (&发送运营商, , )
.否则
    .如果 (是否中文系统)
        输出文本 (“无法连接到WGzeyu(软件作者)提供的WebSocket服务器，无法一键创建房间，请重试或使用手动创建房间”, 假, 真)
    .否则
        输出文本 (“Unable to connect to the WebSocket server provided by WGzeyu (software author), please try again or use the manual creation server”, 假, 真)
    .如果结束
    按钮12.禁止 ＝ 假
.如果结束


.子程序 _按钮4_被单击
.局部变量 内网房间号, 文本型
.局部变量 本机房间号, 文本型

.如果真 (到整数 (编辑框3.内容) ＜ 1 或 到整数 (编辑框3.内容) ＞ 65535)
    .如果 (是否中文系统)
        信息框 (转换编码 (“请输入正确的端口号(1-65535)”), 0, , )
    .否则
        信息框 (“Please enter the correct port number(1-65535)”, 0, , )
    .如果结束
    返回 ()
.如果真结束
按钮4.禁止 ＝ 真
等待服务器获取结果 ()
.如果真 (内网IP ＝ “”)
    内网IP ＝ 取内网IP ()
.如果真结束
.如果 (当前运营商 ＝ “”)
    .如果 (是否中文系统)
        输出文本 (“正在检测网络运营商。。”, 真, 真)
    .否则
        输出文本 (“Detecting network provider”, 真, 真)
    .如果结束
    处理事件 ()
    .如果真 (外网IP ＝ “”)
        外网IP ＝ 取外网IP (真)
    .如果真结束
    当前运营商 ＝ 取运营商 (外网IP, 假, 真)
    .如果 (是否中文系统)
        .如果 (当前运营商 ＝ “”)
            .如果 (外网IP ＝ “”)
                编辑框1.内容 ＝ 文本_替换 (编辑框1.内容, , , , 转换编码 (“正在检测网络运营商。。”), 转换编码 (“公网IP获取失败”))
            .否则
                编辑框1.内容 ＝ 文本_替换 (编辑框1.内容, , , , 转换编码 (“正在检测网络运营商。。”), 转换编码 (“运营商检测失败”))
            .如果结束

        .否则
            编辑框1.内容 ＝ 文本_替换 (编辑框1.内容, , , , 转换编码 (“正在检测网络运营商。。”), 转换编码 (“当前网络:” ＋ 当前运营商))
        .如果结束

    .否则
        .如果 (当前运营商 ＝ “”)
            .如果 (外网IP ＝ “”)
                编辑框1.内容 ＝ 文本_替换 (编辑框1.内容, , , , “Detecting network provider”, “Internet IP acquisition failed”)
            .否则
                编辑框1.内容 ＝ 文本_替换 (编辑框1.内容, , , , “Detecting network provider”, “Internet provider acquisition failed”)
            .如果结束

        .否则
            编辑框1.内容 ＝ 文本_替换 (编辑框1.内容, , , , “Detecting network provider”, “Current network:” ＋ 当前运营商)
        .如果结束

    .如果结束
    输出文本 (“”)
.否则
    .如果 (是否中文系统)
        输出文本 (#换行符 ＋ “当前网络:” ＋ 当前运营商)
    .否则
        输出文本 (#换行符 ＋ “Current network:” ＋ 当前运营商)
    .如果结束

.如果结束
使用端口 ＝ 到整数 (编辑框3.内容)
服务器1.端口 ＝ 使用端口
UDP许可证 ＝ 创建进入许可证 ()
UDP数据报_创建 (使用端口)
加密秘钥 ＝ “”
.如果 (选择框1.选中 ＝ 真)
    加密秘钥 ＝ 生成随机密码 (128)
.否则
    加密秘钥 ＝ 生成随机密码 (15)
.如果结束
内网房间号 ＝ 内网IP ＋ “:” ＋ 到文本 (使用端口) ＋ “!” ＋ 加密秘钥
本机房间号 ＝ “127.0.0.1:” ＋ 到文本 (使用端口) ＋ “!” ＋ 加密秘钥
强制结束线程 (测试句柄)
是否检测中 ＝ 假
编辑框2.内容 ＝ 内网房间号
置剪辑板文本 (内网房间号)
.如果 (是否中文系统)
    输出文本 (“已手动创建房间(服务器)，”, 真, 真)
    输出文本 (“内网房间号：” ＋ 内网房间号, 假, 真)
    输出文本 (“房间号=地址:端口!” ＋ 加密秘钥, 假, 真)
    输出文本 (“手动创建请自行设置端口映射，注意别被防火墙拦截，手动创建房间只有自己手动设置好端口映射后对方才能连接，如果你不会设置，请重新打开软件使用自动创建或一键创建。”, 假, 真)
.否则
    输出文本 (#换行符 ＋ “The server has been created manually,” ＋ #换行符 ＋ “Intranet number: ” ＋ 内网房间号 ＋ #换行符 ＋ “Number=IPaddress:Port!” ＋ 加密秘钥 ＋ #换行符 ＋ “Manually create your own port mapping or intranet penetration, be careful not to be blocked by the firewall”)
.如果结束
心跳包.时钟周期 ＝ 2000
UDP超时检测.时钟周期 ＝ 1000
连接后禁止各种组件 ()
选择框4.禁止 ＝ 真

.子程序 收到数据
.参数 数据, 字节集
.参数 UDP数据, 逻辑型, 可空
.局部变量 内容, 文本型

内容 ＝ 解包数据 (数据, 加密秘钥)
.如果 (内容 ≠ “”)
    .如果真 (UDP数据 ＝ 假)
        上次接收时间 ＝ 到长整数 (时间_取现行时间戳 ())
    .如果真结束

.否则
    返回 ()
.如果结束
.如果真 (内容 ＝ “KILLGTA”)
    .如果 (是否中文系统)
        输出文本 (“收到数据，开始执行干掉GTA”, 真, 真)
    .否则
        输出文本 (“Receive data and start executing GTA”, 真, 真)
    .如果结束
    干掉GTA ()
    返回 ()
.如果真结束
.如果真 (内容 ＝ “OK”)
    返回 ()
.如果真结束
.如果真 (内容 ＝ “OKOK”)
    .如果真 (延迟发送时间 ≠ 0)
        加入延迟 (到长整数 (时间_取现行时间戳 ()) － 延迟发送时间)
        延迟发送时间 ＝ 0
        检测延迟超时.时钟周期 ＝ 0
        更新延迟显示 ()
    .如果真结束
    返回 ()
.如果真结束
.如果真 (内容 ＝ “PING”)
    .如果真 (延迟发送时间 ≠ 0)
        加入延迟 (到长整数 (时间_取现行时间戳 ()) － 延迟发送时间)
        .如果 (是否中文系统)
            输出文本 (“警告：服务器版本过低，无法检测延迟，请提醒房主更新软件，已关闭实时检测延迟，不影响其他功能使用”, 真, 真)
        .否则
            输出文本 (“Warning: The server version is too low to detect the delay. Please remind the server user to update the software. The real-time detection delay has been turned off, which does not affect other functions”, 真, 真)
        .如果结束
        发送数据 (封装数据 (“上个数据为检测PING发出，但服务器版本过低，不支持，建议房主更新软件”, 加密秘钥))
        延迟发送时间 ＝ 0
        检测延迟超时.时钟周期 ＝ 0
        更新延迟显示 ()
    .如果真结束
    ping时钟.时钟周期 ＝ 0
    返回 ()
.如果真结束
.如果真 (内容 ＝ “上个数据为检测PING发出，但服务器版本过低，不支持，建议房主更新软件”)
    返回 ()
.如果真结束
输出文本 (内容, 真, 真)

.子程序 解包数据, 文本型
.参数 内容a, 字节集
.参数 秘钥, 文本型
.参数 是否只检测, 逻辑型, 可空
.局部变量 内容, 文本型
.局部变量 MD5b, 文本型
.局部变量 MD5c, 文本型
.局部变量 验证, 文本型
.局部变量 已次数, 整数型

内容 ＝ 文本_解密c (内容a, 秘钥)
.如果真 (内容 ＝ “”)
    .如果 (是否中文系统)
        输出文本 (“收到数据，解密失败已丢弃，若全都是解密失败请检查房间号是否正确。”, 真, 真)
    .否则
        输出文本 (“The data has been received, and the decryption failure has been discarded. If all the decryption fails, please check if the number is correct.”, 真, 真)
    .如果结束
    返回 (“”)
.如果真结束
.如果真 (快速取出现次数 (内容, “<md5>”) ＝ 0 或 快速取出现次数 (内容, “</hash>”) ＝ 0)
    .如果 (快速取出现次数 (内容, “<md5>”) ＝ 1 或 快速取出现次数 (内容, “</hash>”) ＝ 1)
        .如果 (是否中文系统)
            输出文本 (“收到数据，数据不完整无法识别已丢弃。”, 真, 真)
        .否则
            输出文本 (“Data has been received and the data is incomplete and discarded.”, 真, 真)
        .如果结束

    .否则
        .如果 (是否中文系统)
            输出文本 (“收到数据，解密失败已丢弃，若全都是解密失败请检查房间号是否正确。”, 真, 真)
        .否则
            输出文本 (“The data has been received, and the decryption failure has been discarded. If all the decryption fails, please check if the number is correct.”, 真, 真)
        .如果结束

    .如果结束
    返回 (“”)
.如果真结束
MD5b ＝ 文本_取出中间文本 (内容, “<md5>”, “</md5>”)
内容 ＝ “<body>” ＋ 文本_取出中间文本 (内容, “<body>”, “</body>”) ＋ “</body>”
验证 ＝ 文本_取出中间文本 (内容, “<hash>”, “</hash>”)
MD5c ＝ 校验_取md5 (到字节集 (内容), 真)
.如果真 (验证 ＝ “” 或 MD5b ＝ “”)
    .如果 (是否中文系统)
        输出文本 (“收到数据，数据不完整无法识别已丢弃。”, 真, 真)
    .否则
        输出文本 (“Data has been received and the data is incomplete and discarded.”, 真, 真)
    .如果结束
    返回 (“”)
.如果真结束
.如果真 (MD5b ≠ MD5c)
    .如果 (是否中文系统)
        输出文本 (“收到数据，校验失败为了安全已丢弃。”, 真, 真)
    .否则
        输出文本 (“Data has been received and the verification failure has been discarded.”, 真, 真)
    .如果结束

    返回 (“”)
.如果真结束
.计次循环首 (取数组成员数 (已收到过的数据), 已次数)
    .如果真 (已收到过的数据 [已次数] ＝ 验证)
        ' 输出文本 (#换行符 ＋ 时间_到文本 (, 1, 3) ＋ “收到重复数据，为防重放已丢弃。”)
        返回 (“”)
    .如果真结束

.计次循环尾 ()
.如果真 (是否只检测 ＝ 假)
    加入成员 (已收到过的数据, 验证)
.如果真结束
返回 (文本_替换 (文本_取出中间文本 (内容, “<body>”, “</body>”), , , , “<hash>” ＋ 验证 ＋ “</hash>”, “”))

.子程序 _服务器1_数据到达
.局部变量 收到的数据, 字节集

收到的数据 ＝ 服务器1.取回数据 ()
.如果真 (ping包检测 (收到的数据, 服务器1.取回客户 ()))
    返回 ()
.如果真结束
.如果真 (是否没重复 (收到的数据))
    发送数据 (收到的数据, 0)
    收到数据 (收到的数据)
.如果真结束


.子程序 ping包检测, 逻辑型
.参数 数据, 字节集
.参数 客户, 文本型
.局部变量 内容, 文本型

内容 ＝ 解包数据 (数据, 加密秘钥, 真)
.如果真 (内容 ＝ “PING”)
    服务器1.发送数据 (客户, 封装数据 (“OKOK”, 加密秘钥), 2)
    返回 (真)
.如果真结束
.如果真 (内容 ＝ “”)
    返回 (真)
.如果真结束
返回 (假)

.子程序 封装数据, 字节集
.参数 内容, 文本型
.参数 秘钥, 文本型
.局部变量 MD5a, 文本型
.局部变量 此次hash, 文本型

置随机数种子 ()
此次hash ＝ 时间_取现行时间戳 () ＋ “!” ＋ 到文本 (取随机数 (1000, 65535))
内容 ＝ “<body><hash>” ＋ 此次hash ＋ “</hash>” ＋ 内容 ＋ “</body>”
MD5a ＝ 校验_取md5 (到字节集 (内容), 真)
内容 ＝ 内容 ＋ “<md5>” ＋ MD5a ＋ “</md5>”
.如果真 (选择框5.选中 且 继续接收ID ＝ 0)
    加入成员 (已收到过的数据, 此次hash)
.如果真结束
返回 (文本_加密c (内容, 秘钥))

.子程序 发送数据
.参数 发送的数据, 字节集
.参数 发送方式, 整数型, 可空, 0=TCP+UDP 1=TCP 2=UDP
.参数 是否关键, 逻辑型, 可空, WS连接时若传入真则在任意情况下都不使用逐个私信同名，而是直接广播
.局部变量 已次数, 整数型
.局部变量 循环次数, 整数型
.局部变量 计时, 长整数型

.如果真 (发送方式 ＜ 0 且 发送方式 ＞ 2)
    发送方式 ＝ 0
.如果真结束
.如果真 (继续接收ID ≠ 0)
    WS发送数据 (发送的数据, 是否关键)
    返回 ()
.如果真结束
.如果真 (发送方式 ＝ 0 或 发送方式 ＝ 1)
    .如果 (是否关闭服务器 ＝ 假)
        循环次数 ＝ 取数组成员数 (全客户)
        .计次循环首 (循环次数, 已次数)
            服务器1.发送数据 (全客户 [已次数], 发送的数据, 2)
        .计次循环尾 ()
    .否则
        客户1.发送数据 (发送的数据)
    .如果结束

.如果真结束
.如果真 (发送方式 ＝ 0 或 发送方式 ＝ 2)
    .如果 (是否关闭服务器 ＝ 假)
        .计次循环首 (取数组成员数 (全UDP客户), 已次数)
            .如果真 (已次数 ＞ 取数组成员数 (全UDP客户))
                跳出循环 ()
            .如果真结束
            UDP数据报.发送 (全UDP客户 [已次数].对方信息, 发送的数据, -1)
        .计次循环尾 ()
    .否则
        数据报1.发送数据 (服务器IP, 使用端口, 发送的数据)
    .如果结束

.如果真结束


.子程序 _服务器1_客户进入

.如果 (是否关闭服务器)
    服务器1.断开客户 (服务器1.取回客户 ())
.否则
    加入成员 (全客户, 服务器1.取回客户 ())
    .如果真 (是否检测中 ＝ 假)
        .如果 (是否中文系统)
            发送数据 (封装数据 (“有人加入房间，现在房间内共” ＋ 到文本 (取数组成员数 (全客户) ＋ 1) ＋ “人”, 加密秘钥))
            输出文本 (“有人加入房间，现在房间内共” ＋ 到文本 (取数组成员数 (全客户) ＋ 1) ＋ “人”, 真, 真)
        .否则
            发送数据 (封装数据 (“There are new users connected to the server, now a total of ” ＋ 到文本 (取数组成员数 (全客户) ＋ 1) ＋ “ people online”, 加密秘钥))
            输出文本 (“There are new users connected to the server, now a total of ” ＋ 到文本 (取数组成员数 (全客户) ＋ 1) ＋ “ people online”, 真, 真)
        .如果结束
        ' 输出文本 (#换行符 ＋ 时间_到文本 (, 1, 3) ＋ 服务器1.取回客户 ())
    .如果真结束

.如果结束


.子程序 _服务器1_客户离开
.局部变量 已次数, 整数型
.局部变量 删除的客户, 文本型

删除的客户 ＝ 服务器1.取回客户 ()
.计次循环首 (取数组成员数 (全客户), 已次数)
    .如果真 (全客户 [已次数] ＝ 删除的客户)
        删除成员 (全客户, 已次数, 1)
        跳出循环 ()
    .如果真结束

.计次循环尾 ()
.如果真 (是否检测中 ＝ 假)
    .如果 (是否中文系统)
        发送数据 (封装数据 (“有人离开房间，现在房间内共” ＋ 到文本 (取数组成员数 (全客户) ＋ 1) ＋ “人”, 加密秘钥))
        输出文本 (“有人离开房间，现在房间内共” ＋ 到文本 (取数组成员数 (全客户) ＋ 1) ＋ “人”, 真, 真)
    .否则
        发送数据 (封装数据 (“A user disconnected the server and now a total of ” ＋ 到文本 (取数组成员数 (全客户) ＋ 1) ＋ “ people are online”, 加密秘钥))
        输出文本 (“A user disconnected the server and now a total of ” ＋ 到文本 (取数组成员数 (全客户) ＋ 1) ＋ “ people are online”, 真, 真)
    .如果结束

.如果真结束


.子程序 _心跳包_周期事件

发送数据 (封装数据 (“OK”, 加密秘钥), 1)

.子程序 _心跳包检测_周期事件

.如果真 (到长整数 (时间_取现行时间戳 ()) － 上次接收时间 ＞ 心跳包周期)
    .如果 (是否中文系统)
        输出文本 (到文本 (心跳包周期 ÷ 1000) ＋ “秒未收到心跳包，重新连接服务器”, 真, 真)
    .否则
        输出文本 (到文本 (心跳包周期 ÷ 1000) ＋ “ seconds did not receive the heartbeat packet, reconnect to the server”, 真, 真)
    .如果结束
    上次接收时间 ＝ 到长整数 (时间_取现行时间戳 ())
    ' 重连服务器.时钟周期 ＝ 5
    .如果 (继续接收ID ≠ 0)
        WS创建连接 ()
    .否则
        启动线程 (&重连服务器, , )
    .如果结束

.如果真结束


.子程序 重连服务器

客户1.断开连接 ()
.如果 (客户1.连接 (服务器IP, 使用端口))
    .如果 (是否中文系统)
        输出文本 (“成功连接服务器”, 真, 真)
    .否则
        输出文本 (“Successfully connected to the server”, 真, 真)
    .如果结束

.否则
    .如果 (是否中文系统)
        输出文本 (“服务器连接失败”, 真, 真)
    .否则
        输出文本 (“Server connection failed”, 真, 真)
    .如果结束

.如果结束


.子程序 _按钮5_被单击

.如果真 (编辑框4.内容 ≠ “”)
    .如果 (编辑框5.内容 ＝ “”)
        .如果 (是否中文系统)
            发送数据 (封装数据 (“消息:” ＋ 编辑框4.内容, 加密秘钥))
        .否则
            发送数据 (封装数据 (“Message:” ＋ 编辑框4.内容, 加密秘钥))
        .如果结束

    .否则
        发送数据 (封装数据 (编辑框5.内容 ＋ “:” ＋ 编辑框4.内容, 加密秘钥))
    .如果结束
    .如果真 (继续接收ID ＝ 0)
        .如果真 (选择框5.选中 或 是否关闭服务器 ＝ 假)
            .如果 (编辑框5.内容 ＝ “”)
                .如果 (是否中文系统)
                    输出文本 (“消息:” ＋ 编辑框4.内容, 真, 真)
                .否则
                    输出文本 (“Message:” ＋ 编辑框4.内容, 真, 真)
                .如果结束

            .否则
                输出文本 (编辑框5.内容 ＋ “:” ＋ 编辑框4.内容, 真, 真)
            .如果结束

        .如果真结束

    .如果真结束
    编辑框4.内容 ＝ “”
.如果真结束


.子程序 _编辑框4_按下某键, 逻辑型
.参数 键代码, 整数型
.参数 功能键状态, 整数型

.如果真 (键代码 ＝ #回车键)
    _按钮5_被单击 ()
    返回 (假)
.如果真结束


.子程序 _客户1_数据到达

收到数据 (客户1.取回数据 ())

.子程序 _客户1_连接断开

.如果 (是否中文系统)
    输出文本 (“连接断开，重新连接服务器”, 真, 真)
.否则
    输出文本 (“The connection is broken and reconnected to the server”, 真, 真)
.如果结束
上次接收时间 ＝ 到长整数 (时间_取现行时间戳 ())
' 重连服务器.时钟周期 ＝ 5
启动线程 (&重连服务器, , )

.子程序 _按钮2_被单击
.局部变量 临时内容, 文本型
.局部变量 房间ID, 文本型

.如果真 (编辑框2.内容 ＝ “”)
    .如果 (是否中文系统)
        输出文本 (“请输入房间号！”, 真, 真)
    .否则
        输出文本 (“Please enter the number!”, 真, 真)
    .如果结束
    返回 ()
.如果真结束
按钮2.禁止 ＝ 真
等待服务器获取结果 ()
编辑框2.内容 ＝ 文本_替换 (编辑框2.内容, , , , “：”, “:”, “！”, “!”, “ ”, “”, “。”, “.”, “？”, “?”)
临时内容 ＝ 编辑框2.内容
.如果真 (取文本左边 (编辑框2.内容, 1) ＝ “#”)
    临时内容 ＝ 文本_解密c (编码_BASE64解码 (取文本右边 (编辑框2.内容, 取文本长度 (编辑框2.内容) － 1)), “O42xiMVordM72pvE”)
.如果真结束
服务器IP ＝ 文本_取出中间文本 (“@” ＋ 临时内容, “@”, “:”)
使用端口 ＝ 到整数 (文本_取出中间文本 (临时内容, “:”, “!”))
加密秘钥 ＝ 文本_取出中间文本 (临时内容 ＋ “@”, “!”, “@”)
房间ID ＝ 文本_取出中间文本 (临时内容, “?”, “!”)
.如果真 (选择框5.选中 ＝ 假 且 选择框6.选中 ＝ 假)
    .如果 (是否中文系统)
        输出文本 (“你不勾选TCP传输也不勾选UDP传输，你想怎么传输？意念传输？”, 真, 真)
    .否则
        输出文本 (“You do not check the TCP connection and do not check the UDP datagram. How do you want to transfer data? Sound transmission?”, 真, 真)
    .如果结束
    按钮2.禁止 ＝ 假
    返回 ()
.如果真结束
.如果真 (服务器IP ＝ “” 或 使用端口 ＜ 1 或 使用端口 ＞ 65535 或 加密秘钥 ＝ “”)
    .如果真 (房间ID ＝ “”)
        输出文本 (#换行符 ＋ “”)
        置剪辑板文本 (“”)
        .如果 (是否中文系统)
            输出文本 (#换行符 ＋ “你房间号输错啦！请重新输入！房间号这一串字符要是少个字错个字啥的都可能会导致不能正常传输！”)
            输出文本 (#换行符 ＋ “自动创建的房间号是#或?开头的一串看起来随机的字符”)
            输出文本 (#换行符 ＋ “手动创建的房间号规则是：地址:端口!密码”)
        .否则
            输出文本 (#换行符 ＋ “Error: The number does not match the rule, please enter the correct number”)
            输出文本 (#换行符 ＋ “The number of the automatically created server is a string of seemingly random characters at the beginning of ? or #”)
            输出文本 (#换行符 ＋ “The number rule for manually creating a server is: IPaddress:Port!Password”)
        .如果结束
        编辑框2.内容 ＝ “”
        按钮2.禁止 ＝ 假
        返回 ()
    .如果真结束

.如果真结束
.如果真 (房间ID ≠ “”)
    当前ID ＝ 房间ID
    .如果 (WS创建连接 ())
        .如果 (是否中文系统)
            输出文本 (“ ”, 假, 真)
            输出文本 (“服务器连接成功,已加入房间,由于房主网络不支持自动”, 假, 真)
            输出文本 (“创建也懒得手动创建,当前房间为一键创建,缺点是延迟”, 假, 真)
            输出文本 (“稍高,具体延迟可看上方或下方测试结果,1秒=1000毫秒”, 假, 真)
            输出文本 (“如果你可以自动创建那请重新打开软件创建让他们连接”, 假, 真)
            输出文本 (“自动创建的房间延迟更低连接更稳定,建议用自动创建!”, 假, 真)
            输出文本 (“ ”, 假, 真)
        .否则
            输出文本 (#换行符 ＋ “The server connection is successful. Since the user network that creates the server does not support automatic creation and is too lazy to create it manually, the current free server has a disadvantage that the delay is relatively high.If you don't like high latency, you can re-open the current software, click to automatically create the server, if the creation fails, you can manually create the server in a few minutes by tutorial.”)
        .如果结束
        心跳包周期 ＝ 25000
        上次接收时间 ＝ 到长整数 (时间_取现行时间戳 ())
        心跳包检测.时钟周期 ＝ 1000
        连接后禁止各种组件 ()
        选择框4.禁止 ＝ 真
        选择框4.选中 ＝ 假
        启动线程 (&发送运营商, , )
    .否则
        .如果 (是否中文系统)
            输出文本 (#换行符 ＋ “无法连接到WGzeyu(软件作者)提供的WebSocket服务器，加入房间失败”)
        .否则
            输出文本 (#换行符 ＋ “Unable to connect to the WebSocket server provided by WGzeyu (software author)”)
        .如果结束
        按钮12.禁止 ＝ 假
        按钮2.禁止 ＝ 假
    .如果结束
    返回 ()
.如果真结束
.如果真 (选择框5.选中)
    .如果 (客户1.连接 (服务器IP, 使用端口))
        上次接收时间 ＝ 到长整数 (时间_取现行时间戳 ())
        心跳包检测.时钟周期 ＝ 100
        是否关闭服务器 ＝ 真
        连接后禁止各种组件 ()
        ping时钟.时钟周期 ＝ 5000
        .如果 (是否中文系统)
            输出文本 (#换行符 ＋ “服务器连接成功,已加入房间，左侧显示的延迟为GTASuperESC当前客户端到服务器(本软件到房主软件)的来回耗时，不是游戏延迟”)
        .否则
            输出文本 (#换行符 ＋ “The server connection is successful. The delay displayed on the left is GTASuperESC. The current client-to-server time-consuming time is not the game delay”)
        .如果结束
        强制结束线程 (测试句柄)
        启动线程 (&发送运营商, , )
        是否检测中 ＝ 假
    .否则
        .如果 (是否中文系统)
            输出文本 (#换行符 ＋ “服务器连接失败,加入失败！”)
        .否则
            输出文本 (#换行符 ＋ “Server connection failed, join failed!”)
        .如果结束
        按钮2.禁止 ＝ 假
        返回 ()
    .如果结束

.如果真结束
.如果真 (选择框6.选中)
    是否关闭服务器 ＝ 真
    置随机数种子 ()
    数据报1.端口 ＝ 取随机数 (1025, 32767)  ' 易语言说明里是32767。。
    .如果 (选择框4.选中)
        UDP心跳包.时钟周期 ＝ 200
    .否则
        UDP心跳包.时钟周期 ＝ 500
    .如果结束
    .如果真 (选择框5.选中 ＝ 假)
        连接后禁止各种组件 ()
        .如果 (是否中文系统)
            输出文本 (#换行符 ＋ “仅UDP不知道是否连接成功，也不会记到房间人数里，反正是已经加入房间了，建议在右下角说句话试试，能看到则为加入成功，若服务器版本低于v2.4或没有创建UDP映射，将不支持UDP连接。”)
            标签延迟.标题 ＝ 转换编码 (“延迟：仅UDP传输暂不支持测试延迟”)
        .否则
            输出文本 (#换行符 ＋ “Only UDP datagram transmission does not know whether the connection is successful, and will not be recorded in the number of people in the room. Anyway, it is already connected. It is recommended to try the sentence in the lower right corner. If you can see the connection is successful, if the server version is lower than v2 .4 or no UDP mapping is created, UDP connections will not be supported.”)
            标签延迟.标题 ＝ “Delay: UDP datagram does not support test delay”
        .如果结束
        启动线程 (&发送运营商, , )
    .如果真结束

.如果真结束


.子程序 连接后禁止各种组件

编辑框4.禁止 ＝ 假
编辑框2.输入方式 ＝ 1
按钮5.禁止 ＝ 假
编辑框5.禁止 ＝ 假
按钮1.禁止 ＝ 真
按钮2.禁止 ＝ 真
按钮4.禁止 ＝ 真
编辑框3.禁止 ＝ 真
选择框1.禁止 ＝ 真
标签延迟.可视 ＝ 真
选择框5.禁止 ＝ 真
选择框6.禁止 ＝ 真
按钮12.禁止 ＝ 真

.子程序 发送运营商
.局部变量 当前运营商短, 文本型

.如果真 (外网IP ＝ “”)
    外网IP ＝ 取外网IP ()
.如果真结束
当前运营商短 ＝ 取运营商 (外网IP, 真)
.如果真 (当前运营商短 ≠ “”)
    .如果 (是否中文系统)
        .如果 (继续接收ID ≠ 0)
            发送数据 (封装数据 (“刚加入的用户网络为:” ＋ 当前运营商短 ＋ “,延迟:” ＋ 到文本 (全WS服务器 [WS使用服务器].服务端延迟 ＋ 全WS服务器 [WS使用服务器].平均延迟) ＋ “ms”, 加密秘钥))
        .否则
            发送数据 (封装数据 (“刚刚加入的用户网络运营商为:” ＋ 当前运营商短, 加密秘钥))
        .如果结束
        .如果真 (选择框5.选中 且 继续接收ID ＝ 0)
            输出文本 (“刚刚加入的用户网络运营商为:” ＋ 当前运营商短, 真, 真)
        .如果真结束

    .否则
        .如果 (继续接收ID ≠ 0)
            发送数据 (封装数据 (“The user network that just connected is:” ＋ 当前运营商短 ＋ “,delay:” ＋ 到文本 (全WS服务器 [WS使用服务器].服务端延迟 ＋ 全WS服务器 [WS使用服务器].平均延迟) ＋ “ms”, 加密秘钥))
        .否则
            发送数据 (封装数据 (“The user network provider that just connected is:” ＋ 当前运营商短, 加密秘钥))
        .如果结束
        .如果真 (选择框5.选中 且 继续接收ID ＝ 0)
            输出文本 (“The user network provider that just connected is:” ＋ 当前运营商短, 真, 真)
        .如果真结束

    .如果结束

.如果真结束


.子程序 _标签3_反馈事件, 整数型
.参数 参数一, 整数型
.参数 参数二, 整数型

.如果真 (参数一 ＝ 热键)
    .如果 (是否中文系统)
        输出文本 (“检测到快捷键，开始执行干掉GTA”, 真, 真)
    .否则
        输出文本 (“A shortcut key was detected to start executing KillGTA”, 真, 真)
    .如果结束

    干掉GTA (真)
.如果真结束


.子程序 _组合框1_列表项被选择

注册热键a ()
触发保存 ()

.子程序 _组合框2_列表项被选择

注册热键a ()
触发保存 ()

.子程序 注册热键a
.局部变量 功能键选中, 整数型

.如果真 (热键 ≠ 0)
    撤销热键 (取窗口句柄 (), 热键)
.如果真结束
功能键选中 ＝ 组合框1.现行选中项
.如果真 (功能键选中 ＝ 3)
    功能键选中 ＝ 4  ' 才发现Alt对应是4不是3。。0-无功能键；1-CTRL键状态；2-SHIFT键状态；4-ALT键状态
.如果真结束
热键 ＝ 注册热键 (取窗口句柄 (), 标签3.取窗口句柄 (), 功能键选中, 组合框2.现行选中项 ＋ 112)
.如果 (是否中文系统)
    .如果 (组合框1.现行选中项 ＝ 0)
        输出文本 (“已将关闭GTA快捷键设为” ＋ 组合框2.取项目文本 (组合框2.现行选中项), 真, 真)
    .否则
        输出文本 (“已将关闭GTA快捷键设为” ＋ 组合框1.取项目文本 (组合框1.现行选中项) ＋ “+” ＋ 组合框2.取项目文本 (组合框2.现行选中项), 真, 真)
    .如果结束
    输出文本 (“建议测试按键，若与其他软件冲突会无法使用”, 真, 真)
.否则
    .如果 (组合框1.现行选中项 ＝ 0)
        输出文本 (“KillGTA shortcut has been set to ” ＋ 组合框2.取项目文本 (组合框2.现行选中项), 真, 真)
    .否则
        输出文本 (“KillGTA shortcut has been set to ” ＋ 组合框1.取项目文本 (组合框1.现行选中项) ＋ “+” ＋ 组合框2.取项目文本 (组合框2.现行选中项), 真, 真)
    .如果结束
    输出文本 (#换行符 ＋ “It is recommended to test the shortcut keys first. If it conflicts with other software, it may not be used.”)

.如果结束
.如果真 (热键 ＝ 0)
    .如果 (是否中文系统)
        输出文本 (“错误：快捷键注册失败，请检测是否与其他软件冲突，并更换快捷键，否则按键无效！”, 真, 真)
        信息框 (转换编码 (“快捷键注册失败，可能与其他软件冲突，” ＋ #换行符 ＋ “请更换快捷键，否则按键无效！”), #错误图标, 转换编码 (“错误”), _启动窗口)
    .否则
        输出文本 (“Error: The shortcut key registration failed. Please check if it conflicts with other software and replace the shortcut key, otherwise the key is invalid!”, 真, 真)
        信息框 (“The shortcut key registration failed, which may conflict with other software.” ＋ #换行符 ＋ “Please replace the shortcut key, otherwise the key is invalid!”, #错误图标, “Error”, _启动窗口)
    .如果结束

.如果真结束


.子程序 输出文本
.参数 输出的文本, 文本型
.参数 带时间, 逻辑型, 可空
.参数 带换行, 逻辑型, 可空
.局部变量 要输出的文本, 文本型

.如果真 (带换行)
    要输出的文本 ＝ #换行符
.如果真结束
.如果真 (带时间)
    要输出的文本 ＝ 要输出的文本 ＋ 时间_到文本 (, 1, 3) ＋ “ ”
.如果真结束
编辑框1.加入文本 (要输出的文本 ＋ 转换编码 (输出的文本))

.子程序 更新检测
.局部变量 访问结果, 文本型
.局部变量 循环次数, 整数型
.局部变量 读取版本, 整数型
.局部变量 更新内容, 文本型
.局部变量 已次数, 整数型
.局部变量 使用服务器, 文本型
.局部变量 使用服务器a, 文本型
.局部变量 点击结果, 整数型
.局部变量 获取服务器信息, 文本型

.如果 (是否中文系统)
    输出文本 (“开始检测更新及获取联机所需服务器信息”, 真, 真)
.否则
    输出文本 (“Start detecting updates and getting the server information you need to connect online”, 真, 真)
.如果结束
.计次循环首 (3, 循环次数)
    访问结果 ＝ 到文本 (编码_BASE64解码 (文本_取出中间文本 (到文本 (网页_访问_对象 (“https://wgzeyu.gtxcn.com/GTASuperESC/updatecheck.php”, 1, “ver=” ＋ 到文本 (当前版本), , , , , , , , , 10)), “<base64>”, “</base64>”)))
    使用服务器 ＝ “HTTPS:wgzeyu.gtxcn.com[加密,日本VPS+CloudFlare,只取新版内容]”  ' 使用PHP防止被cloudflare缓存,第一时间读取到更新,并且只输出比当前版本新的版本号,加载更快
    .如果 (是否中文系统)
        使用服务器a ＝ “获取成功，使用WGzeyu主服务器，可以联机了”
    .否则
        使用服务器a ＝ “Get successful, use WGzeyu master server”
    .如果结束
    .如果真 (访问结果 ≠ “”)  ' 1默认使用带HTTPS的个人服务器读取更新
        跳出循环 ()
    .如果真结束
    访问结果 ＝ 到文本 (编码_BASE64解码 (文本_取出中间文本 (到文本 (网页_访问_对象 (“https://wgzeyu.github.io/GTASuperESC/updatecheck.txt”, 0, , , , , , , , , , 10)), “<base64>”, “</base64>”)))
    使用服务器 ＝ “HTTPS:wgzeyu.github.io[加密,GitHubIO]”
    .如果 (是否中文系统)
        使用服务器a ＝ “获取成功，从主服获取失败，从备服获取成功”
    .否则
        使用服务器a ＝ “Get failed, but get succeeded from the alternate server GitHubPages”
    .如果结束
    .如果真 (访问结果 ≠ “”)  ' 2其次使用带HTTPS的GitHub读取更新
        跳出循环 ()
    .如果真结束

.计次循环尾 ()
.如果真 (访问结果 ＝ “”)
    .如果 (是否中文系统)
        输出文本 (“多次获取失败，请检查网络连接。由于在线获取服务器信息失败，将使用软件发布时保存的服务器信息，可能已过时”, 真, 真)
    .否则
        输出文本 (“Multiple access failures, please check the network connection.Failed to get server information online,Will use the server information saved when the software was released,May be out of date”, 真, 真)
    .如果结束
    调试输出 (“检测更新失败”)
    获取服务器结果 ＝ 2
    返回 ()
.如果真结束
调试输出 (访问结果)
读取版本 ＝ 到整数 (文本_取出中间文本 (访问结果, “<ver>”, “</ver>”))
调试输出 (“本地版本号：” ＋ 到文本 (当前版本) ＋ “ 在线版本号：” ＋ 到文本 (读取版本) ＋ “ 使用服务器：” ＋ 使用服务器)
.如果真 (读取版本 ＞ 当前版本)
    .如果 (是否中文系统)
        更新内容 ＝ “GTASuperESCv” ＋ 到文本 (当前版本 ÷ 10) ＋ “→v” ＋ 到文本 (读取版本 ÷ 10) ＋ “更新记录：” ＋ #换行符
    .否则
        更新内容 ＝ “GTASuperESCv” ＋ 到文本 (当前版本 ÷ 10) ＋ “>v” ＋ 到文本 (读取版本 ÷ 10) ＋ “ Changelog:” ＋ #换行符
    .如果结束
    .计次循环首 (读取版本 － 当前版本, 已次数)
        .如果真 (文本_取出中间文本 (访问结果, “<” ＋ 到文本 (读取版本 － 已次数 ＋ 1) ＋ “>”, “</” ＋ 到文本 (读取版本 － 已次数 ＋ 1) ＋ “>”) ≠ “”)
            更新内容 ＝ 更新内容 ＋ 文本_取出中间文本 (访问结果, “<” ＋ 到文本 (读取版本 － 已次数 ＋ 1) ＋ “>”, “</” ＋ 到文本 (读取版本 － 已次数 ＋ 1) ＋ “>”) ＋ #换行符
        .如果真结束

    .计次循环尾 ()
    .如果 (是否中文系统)
        输出文本 (#换行符 ＋ 文本_取出中间文本 (访问结果, “<txt>”, “</txt>”) ＋ #换行符 ＋ “下载地址：” ＋ 文本_取出中间文本 (访问结果, “<url>”, “</url>”))
    .否则
        输出文本 (#换行符 ＋ “Find new version, download address:” ＋ 文本_取出中间文本 (访问结果, “<url>”, “</url>”))
    .如果结束
    .如果 (读取版本 － 当前版本 ≥ 5)
        .如果 (是否中文系统)
            信息框 (转换编码 (文本_取出中间文本 (访问结果, “<txt>”, “</txt>”) ＋ #换行符 ＋ #换行符 ＋ 更新内容 ＋ #换行符 ＋ “您的版本过低，请更新！”), #警告图标 ＋ #确认钮, 转换编码 (“当前软件版本过低”), _启动窗口)
        .否则
            信息框 (“Find the new version,” ＋ #换行符 ＋ #换行符 ＋ 更新内容 ＋ #换行符 ＋ “Your version is too low, please update!”, #警告图标 ＋ #确认钮, “Software version is too low”, _启动窗口)
        .如果结束
        网页_打开指定网址 (文本_取出中间文本 (访问结果, “<url>”, “</url>”))
    .否则
        .如果 (是否中文系统)
            .如果真 (信息框 (转换编码 (文本_取出中间文本 (访问结果, “<txt>”, “</txt>”) ＋ #换行符 ＋ #换行符 ＋ 更新内容 ＋ #换行符 ＋ “是否更新？”), 36, 转换编码 (“发现新版本”), _启动窗口) ＝ 5)
                网页_打开指定网址 (文本_取出中间文本 (访问结果, “<url>”, “</url>”))
            .如果真结束

        .否则
            .如果真 (信息框 (“Find the new version,” ＋ #换行符 ＋ #换行符 ＋ 更新内容 ＋ #换行符 ＋ “Is it updated?”, 36, “Discover new version”, _启动窗口) ＝ 5)
                网页_打开指定网址 (文本_取出中间文本 (访问结果, “<url>”, “</url>”))
            .如果真结束

        .如果结束

    .如果结束

.如果真结束
输出文本 (使用服务器a, 真, 真)
获取服务器信息 ＝ 文本_取出中间文本 (访问结果, “<serverinfo>”, “</serverinfo>”)
获取全WS服务器 ＝ 文本_取出中间文本 (获取服务器信息, “<websocket>”, “</websocket>”)
获取全检测IP服务器 ＝ 文本_取出中间文本 (获取服务器信息, “<getip>”, “</getip>”)
获取全端口扫描服务器 ＝ 文本_取出中间文本 (获取服务器信息, “<portscan>”, “</portscan>”)
外网IP ＝ 文本_取出中间文本 (获取服务器信息, “<nowip>”, “</nowip>”)
.如果真 (外网IP ≠ “”)
    .如果 (是否为IPv4地址 (外网IP) ＝ 假)
        外网IP ＝ “”
    .否则
        .如果真 (是否内网IP (外网IP))
            外网IP ＝ “”
        .如果真结束

    .如果结束

.如果真结束
调试输出 (外网IP)
获取服务器结果 ＝ 1

.子程序 _按钮6_被单击

.如果 (是否中文系统)
    输出文本 (“检测到按键，开始执行干掉GTA”, 真, 真)
.否则
    输出文本 (“Detected button, start KillGTA”, 真, 真)
.如果结束
干掉GTA (真)

.子程序 _按钮8_被单击

网页_打开指定网址 (“https://github.com/wgzeyu/GTASuperESC/issues”)
网页_打开指定网址 (“https://tieba.baidu.com/p/5897203981”)

.子程序 _按钮7_被单击

网页_打开指定网址 (“https://github.com/wgzeyu/GTASuperESC”)

.子程序 是否管理员, 逻辑型, 公开, 判断当前程序是否以管理员身份运行
.局部变量 WinVer, 短整数型
.局部变量 hToken, 整数型
.局部变量 te, TOKEN_ELEVATION
.局部变量 dwReturnLength, 整数型
.局部变量 bIsElevated, 逻辑型
.局部变量 Bin, 字节集

WinVer ＝ 位与 (GetVersion (), 65535)  ' 获取Windows 版本
Bin ＝ 到字节集 (WinVer)
WinVer ＝ Bin [1]
Bin [1] ＝ Bin [2]
Bin [2] ＝ WinVer
WinVer ＝ 取字节集数据 (Bin, #短整数型, )
.如果真 (WinVer ＜ 1536)  ' 如果当前系统木有 以管理员身份运行 介个功能
    返回 (假)
.如果真结束
.如果真 (OpenProcessToken (GetCurrentProcess (), 8, hToken) ≠ 0)  ' 打开访问令牌
    GetTokenInformation (hToken, 20, te, 4, dwReturnLength)  ' 获取令牌信息
    .如果真 (dwReturnLength ＝ 4)
        bIsElevated ＝ te.TokenIsElevated ≠ 0
    .如果真结束
    CloseHandle (hToken)  ' 关闭句柄
.如果真结束
返回 (bIsElevated)

.子程序 _按钮9_被单击

.如果真 (选择框3.选中)
    禁用网卡 ()
.如果真结束
.如果真 (选择框7.选中)
    进程断网 (编辑框7.内容)
.如果真结束
.如果真 (选择框3.选中 ＝ 假 且 选择框7.选中 ＝ 假)
    .如果 (是否中文系统)
        输出文本 (“请选择禁用网卡或进程断网后再执行操作”, 真, 真)
    .否则
        输出文本 (“Please choose to disable the network card or the process is disconnected before performing the operation.”, 真, 真)
    .如果结束

.如果真结束


.子程序 禁用网卡

运行 (“netsh interface set interface ” ＋ #引号 ＋ 组合框3.内容 ＋ #引号 ＋ “ disabled”, 假, 1)
.如果 (是否中文系统)
    输出文本 (“已禁用” ＋ 组合框3.内容, 真, 真)
.否则
    输出文本 (组合框3.内容 ＋ “ is disabled”, 真, 真)
.如果结束


.子程序 启用网卡

运行 (“netsh interface set interface ” ＋ #引号 ＋ 组合框3.内容 ＋ #引号 ＋ “ enabled”, 假, 6)
.如果 (是否中文系统)
    输出文本 (“已启用” ＋ 组合框3.内容, 真, 真)
.否则
    输出文本 (组合框3.内容 ＋ “ is enabled”, 真, 真)
.如果结束


.子程序 _按钮10_被单击

.如果真 (选择框3.选中)
    启用网卡 ()
.如果真结束
.如果真 (选择框7.选中)
    恢复进程断网 ()
.如果真结束
.如果真 (选择框3.选中 ＝ 假 且 选择框7.选中 ＝ 假)
    .如果 (是否中文系统)
        输出文本 (“请选择禁用网卡或进程断网后再执行操作”, 真, 真)
    .否则
        输出文本 (“Please choose to disable the network card or the process is disconnected before performing the operation.”, 真, 真)
    .如果结束

.如果真结束


.子程序 _选择框3_被单击

.如果真 (选择框3.选中)
    .如果 (是否中文系统)
        输出文本 (#换行符 ＋ “提示：断网速度没有结束进程快，可能会延迟0.5秒左右才断网，还是建议使用结束进程或进程断网，另外不建议高延迟联机使用断网，以及强烈不建议自动或手动创建房间的房主使用断网”)
    .否则
        输出文本 (#换行符 ＋ “Tip: Disabling the speed of the network card does not end the process fast, it may delay 0.6 seconds or so before disabling the network card. It is recommended to use the end process. It is not recommended that the GTASuperESC server use the banned network card.”)
    .如果结束

.如果真结束
触发保存 ()
检测断网选中 ()

.子程序 检测断网选中

.如果 (选择框3.选中 ＝ 真)
    .如果 (选择框3.禁止 ＝ 假)
        是否断网 ＝ 真
    .否则
        是否断网 ＝ 假
    .如果结束

.否则
    是否断网 ＝ 假
.如果结束


.子程序 _保存设置_周期事件

保存设置.时钟周期 ＝ 0
.如果 (保存设置 (到整数 (编辑框3.内容), 组合框1.现行选中项, 组合框2.现行选中项, 选择框1.选中, 编辑框6.内容, 选择框2.选中, 选择框3.选中, 编辑框5.内容, 选择框5.选中, 选择框6.选中, 组合框4.现行选中项, 编辑框7.内容, 选择框7.选中))
    .如果真 (是否检测中 ＝ 假)
        .如果 (是否中文系统)
            输出文本 (“保存设置成功”, 真, 真)
        .否则
            输出文本 (“Save settings successfully”, 真, 真)
        .如果结束

    .如果真结束

.否则
    .如果 (是否中文系统)
        输出文本 (“保存设置失败，请确保本软件所在目录为纯英文”, 真, 真)
    .否则
        输出文本 (“Save settings failed. Please ensure that the directory of this software is in English”, 真, 真)
    .如果结束

.如果结束


.子程序 _选择框1_被单击

触发保存 ()

.子程序 _编辑框3_内容被改变

触发保存 ()

.子程序 _编辑框6_内容被改变

触发保存 ()

.子程序 触发保存

保存设置.时钟周期 ＝ 0
保存设置.时钟周期 ＝ 保存周期

.子程序 _选择框2_被单击

触发保存 ()

.子程序 _编辑框4_内容被改变
.局部变量 已次数, 整数型

.如果真 (编辑框4.内容 ＝ “显示客户”)
    输出文本 (#换行符 ＋ “TCP客户：”)
    .计次循环首 (取数组成员数 (全客户), 已次数)
        输出文本 (#换行符 ＋ 全客户 [已次数])
    .计次循环尾 ()
    输出文本 (#换行符 ＋ “UDP客户：”)
    .计次循环首 (取数组成员数 (全UDP客户), 已次数)
        .如果真 (已次数 ＞ 取数组成员数 (全UDP客户))
            跳出循环 ()
        .如果真结束
        输出文本 (#换行符 ＋ 全UDP客户 [已次数].对方信息.对方IP ＋ “:” ＋ 到文本 (全UDP客户 [已次数].对方信息.对方端口))
    .计次循环尾 ()
    编辑框4.内容 ＝ “”
.如果真结束
.如果真 (编辑框4.内容 ＝ “白色背景”)
    编辑框4.内容 ＝ “”
    编辑框1.文本颜色 ＝ #黑色
    编辑框1.背景颜色 ＝ #白色
.如果真结束


.子程序 是否为IPv4地址, 逻辑型
.参数 检测文本, 文本型
.局部变量 全内容, 文本型, , "0"
.局部变量 已次数, 整数型

全内容 ＝ 分割文本 (检测文本, “.”, )
.如果真 (取数组成员数 (全内容) ≠ 4)
    返回 (假)
.如果真结束
.计次循环首 (取数组成员数 (全内容), 已次数)
    .如果真 (文本_是否为数字 (全内容 [已次数]) ＝ 假)
        返回 (假)
    .如果真结束
    .如果真 (到整数 (全内容 [已次数]) ＞ 255)
        返回 (假)
    .如果真结束

.计次循环尾 ()
返回 (真)

.子程序 _编辑框5_内容被改变

触发保存 ()

.子程序 _选择框4_被单击

.如果真 (选择框4.选中)  ' 这种经常断开长连接的宽带完全不能创建服务器，顺便禁止点击创建按钮
    按钮1.禁止 ＝ 真
    按钮4.禁止 ＝ 真
    选择框4.禁止 ＝ 真
    心跳包周期 ＝ 3000
    .如果真 (UDP心跳包.时钟周期 ＝ 500)
        UDP心跳包.时钟周期 ＝ 200
    .如果真结束
    .如果 (是否中文系统)
        输出文本 (#换行符 ＋ “已开启严格心跳包，若创建房间的软件版本低于v0.7，可能导致无法正常连接”)
    .否则
        输出文本 (#换行符 ＋ “A strict heartbeat packet has been turned on. If the server version is lower than v0.7, it may cause the connection to fail.”)
    .如果结束

.如果真结束


.子程序 _ping时钟_周期事件

延迟发送时间 ＝ 到长整数 (时间_取现行时间戳 ())
客户1.发送数据 (封装数据 (“PING”, 加密秘钥))
检测延迟超时.时钟周期 ＝ 3000
ping时钟.时钟周期 ＝ 10000

.子程序 _检测延迟超时_周期事件

检测延迟超时.时钟周期 ＝ 0
延迟发送时间 ＝ 0
加入延迟 (0)
更新延迟显示 ()

.子程序 加入延迟
.参数 加入的数据, 整数型
.局部变量 当前延迟位置, 整数型

当前延迟位置 ＝ 上次延迟位置 ＋ 1
.如果真 (当前延迟位置 ＞ 5)
    当前延迟位置 ＝ 1
.如果真结束
全延迟 [当前延迟位置] ＝ 加入的数据
上次延迟 ＝ 加入的数据
上次延迟位置 ＝ 当前延迟位置

.子程序 更新延迟显示
.局部变量 全部延迟数据, 整数型
.局部变量 数据次数, 整数型
.局部变量 已次数, 整数型

.如果 (上次延迟 ≠ 0)
    .计次循环首 (5, 已次数)
        .如果真 (全延迟 [已次数] ≠ 0)
            全部延迟数据 ＝ 全部延迟数据 ＋ 全延迟 [已次数]
            数据次数 ＝ 数据次数 ＋ 1
        .如果真结束

    .计次循环尾 ()
    .如果 (是否中文系统)
        标签延迟.标题 ＝ 转换编码 (“延迟：” ＋ 到文本 (四舍五入 (全部延迟数据 ÷ 数据次数, 1)) ＋ “ms”)
    .否则
        标签延迟.标题 ＝ “Delay:” ＋ 到文本 (四舍五入 (全部延迟数据 ÷ 数据次数, 1)) ＋ “ms”
    .如果结束

.否则
    .如果 (是否中文系统)
        标签延迟.标题 ＝ 转换编码 (“延迟：超时”)
    .否则
        标签延迟.标题 ＝ “Delay:timeout”
    .如果结束

.如果结束


.子程序 取机器码, 文本型, , 确保软件被打包时不使用其他人的设置

返回 (取文本中间 (校验_取md5 (到字节集 (系统_取MAC地址 () ＋ 系统_取MAC地址 () ＋ 系统_取CPU型号 () ＋ 系统_取计算机名 () ＋ 系统_取系统版本 () ＋ 到文本 (系统_取硬盘特征字 ())), 真), 8, 8))

.子程序 _按钮3_被单击

载入 (教程窗口, _启动窗口, 假)

.子程序 取运营商, 文本型
.参数 IP地址, 文本型
.参数 只输出国家运营商, 逻辑型, 可空
.参数 不许重试, 逻辑型, 可空
.局部变量 访问内容, 文本型
.局部变量 返回状态, 整数型
.局部变量 全内容, 文本型, , "0"
.局部变量 输出内容, 文本型

访问内容 ＝ 编码_Utf8到Ansi (网页_访问_对象 (“http://freeapi.ipip.net/” ＋ IP地址, , , , , , , 返回状态, , , , 3))
访问内容 ＝ 文本_取出中间文本 (访问内容, “[”, “]”)
.如果真 (访问内容 ＝ “” 或 返回状态 ≠ 200)
    .如果真 (不许重试)
        返回 (“”)
    .如果真结束
    访问内容 ＝ 编码_Utf8到Ansi (网页_访问_对象 (“http://freeapi.ipip.net/” ＋ IP地址, , , , , , , 返回状态, , , , 7))
    访问内容 ＝ 文本_取出中间文本 (访问内容, “[”, “]”)
    .如果真 (访问内容 ＝ “” 或 返回状态 ≠ 200)
        返回 (“”)
    .如果真结束

.如果真结束
全内容 ＝ 分割文本 (访问内容, “,”, )
.如果真 (取数组成员数 (全内容) ≠ 5)
    返回 (“”)
.如果真结束
.如果真 (只输出国家运营商 ＝ 假)
    输出内容 ＝ 文本_替换 (访问内容, , , , #引号, “”, “,”, “”)
    返回 (输出内容)
.如果真结束
输出内容 ＝ 文本_替换 (全内容 [1], , , , #引号, “”)
输出内容 ＝ 输出内容 ＋ 文本_替换 (全内容 [5], , , , #引号, “”, “中国”, “”, “.com”, “”, “.net”, “”)  ' 防止输出“中国中国联通”
返回 (输出内容)

.子程序 _按钮11_被单击
.局部变量 信息框返回, 整数型

.如果真 (按钮11.标题 ＝ 转换编码 (“GTA卡单人”) 或 按钮11.标题 ＝ “Stuck single”)
    .如果 (选择框3.禁止 ＝ 真)
        .如果 (是否中文系统)
            信息框返回 ＝ 信息框 (转换编码 (“当前使用卡单人，如需使用防火墙规则” ＋ #换行符 ＋ “永久单人请右键以管理员权限运行本软件” ＋ #换行符 ＋ “原理：暂停GTA进程10秒后恢复” ＋ #换行符 ＋ “GTA5是运行在窗口模式吗？” ＋ #换行符 ＋ “窗口点是 全屏点否”), #取消是否钮 ＋ #询问图标, 转换编码 (“GTA5卡单人公开战局”), _启动窗口)
        .否则
            信息框返回 ＝ 信息框 (“Let GTAOnline run in a public battle with only one person” ＋ #换行符 ＋ “Principle: Suspend the GTA process to recover after 10 seconds” ＋ #换行符 ＋ “Is GTA5 running in window mode?” ＋ #换行符 ＋ “Window point yes,full screen point no”, #取消是否钮 ＋ #询问图标, “GTA single public war situation”, _启动窗口)
        .如果结束
        .如果真 (信息框返回 ＝ #取消钮)
            返回 ()
        .如果真结束
        .如果真 (信息框返回 ＝ #是钮)
            启动线程 (&卡单人线程, 0, )
        .如果真结束
        .如果真 (信息框返回 ＝ #否钮)
            .如果 (是否中文系统)
                信息框 (转换编码 (“请在点击确定之后，立刻切换回GTA5” ＋ #换行符 ＋ “软件将在8秒后暂停GTA5进程10秒” ＋ #换行符 ＋ “GTA5进程恢复之前不要返回桌面”), #确认钮, 转换编码 (“GTA5卡单人公开战局”), _启动窗口)
            .否则
                信息框 (“Please switch back to GTA5 immediately after clicking OK” ＋ #换行符 ＋ “will pause the GTA5 process for 10 seconds after 8 seconds” ＋ #换行符 ＋ “do not return to the desktop before the GTA5 process is restored”, #确认钮, “GTA single public war situation”, _启动窗口)
            .如果结束
            启动线程 (&卡单人线程, 1, )
        .如果真结束

    .否则
        运行 (“netsh advfirewall firewall add rule name=” ＋ #引号 ＋ “GTASuperESC Ka Dan Ren” ＋ #引号 ＋ “ dir=out profile=any localport=6672 remoteport=any protocol=UDP action=block enable=yes”, 假, 6)
        .如果 (是否中文系统)
            输出文本 (“已添加防火墙规则禁止战局连接”, 真, 真)
            按钮11.标题 ＝ 转换编码 (“恢复公开”)
        .否则
            输出文本 (“Firewall rules have been added to prohibit war connection”, 真, 真)
            按钮11.标题 ＝ “recover”
        .如果结束

    .如果结束
    返回 ()
.如果真结束
.如果真 (按钮11.标题 ＝ 转换编码 (“恢复公开”) 或 按钮11.标题 ＝ “recover”)
    运行 (“netsh advfirewall firewall delete rule name=” ＋ #引号 ＋ “GTASuperESC Ka Dan Ren” ＋ #引号, 假, 6)
    .如果 (是否中文系统)
        输出文本 (“已删除相关防火墙规则”, 真, 真)
        按钮11.标题 ＝ 转换编码 (“GTA卡单人”)
    .否则
        输出文本 (“Related firewall rules have been removed”, 真, 真)
        按钮11.标题 ＝ “Stuck single”
    .如果结束

.如果真结束


.子程序 卡单人线程
.参数 是否全屏模式, 整数型
.局部变量 进程ID, 整数型

进程ID ＝ 取进程ID (“GTA5.exe”)
.如果真 (进程ID ＝ -1)
    .如果 (是否中文系统)
        输出文本 (#换行符 ＋ 时间_到文本 (, 1, 3) ＋ “ 未找到GTA5进程”)
    .否则
        输出文本 (#换行符 ＋ 时间_到文本 (, 1, 3) ＋ “ GTA5 process not found”)
    .如果结束
    返回 ()
.如果真结束
按钮11.禁止 ＝ 真
.如果真 (是否全屏模式 ＝ 1)
    延时 (8000)
.如果真结束
进程_暂停 (进程ID, 真)
.如果 (是否中文系统)
    输出文本 (#换行符 ＋ 时间_到文本 (, 1, 3) ＋ “ 已暂停GTA5进程”)
.否则
    输出文本 (#换行符 ＋ 时间_到文本 (, 1, 3) ＋ “ The GTA5 process has been suspended”)
.如果结束
延时 (10000)
进程_暂停 (进程ID, 假)
.如果 (是否中文系统)
    输出文本 (#换行符 ＋ 时间_到文本 (, 1, 3) ＋ “ 已恢复GTA5进程”)
.否则
    输出文本 (#换行符 ＋ 时间_到文本 (, 1, 3) ＋ “ GTA5 process has been restored”)
.如果结束
按钮11.禁止 ＝ 假

.子程序 取进程ID, 整数型
.参数 进程名称, 文本型, , 进程名称
.局部变量 进程信息数组, 进程信息, , "0"
.局部变量 计次, 整数型

进程信息数组 ＝ 取系统进程列表 ()
.计次循环首 (取数组成员数 (进程信息数组), 计次)
    .如果真 (到小写 (进程信息数组 [计次].进程名称) ＝ 到小写 (进程名称))
        返回 (进程信息数组 [计次].进程标识符)
    .如果真结束

.计次循环尾 ()
返回 (-1)

.子程序 UDP数据报_创建
.参数 哪个端口, 整数型

.如果真 (UDP线程 ≠ 0)
    强制结束线程 (UDP线程)
.如果真结束
UDP数据报.配置 (哪个端口)
启动线程 (&UDP数据报_循环接收, , UDP线程)

.子程序 UDP数据报_循环接收
.局部变量 对方的信息, 对方信息
.局部变量 数据成功, 逻辑型
.局部变量 收到了数据, 字节集

.循环判断首 ()
    收到了数据 ＝ UDP数据报.接收 (0, 对方的信息, 数据成功)
    .如果真 (数据成功)
        UDP数据报_数据到达 (收到了数据, 对方的信息)
    .如果真结束

.循环判断尾 (真)

.子程序 UDP数据报_数据到达
.参数 收到UDP数据, 字节集
.参数 对方的信息, 对方信息
.局部变量 已次数, 整数型
.局部变量 是否已有, 逻辑型
.局部变量 此次UDP客户, UDP客户

' 调试输出 (“UDP服务器数据到达”)
进入许可区 (UDP许可证)
.计次循环首 (取数组成员数 (全UDP客户), 已次数)
    .如果真 (已次数 ＞ 取数组成员数 (全UDP客户))
        跳出循环 ()
    .如果真结束
    .如果真 (全UDP客户 [已次数].对方信息.对方IP ＝ 对方的信息.对方IP 且 全UDP客户 [已次数].对方信息.对方端口 ＝ 对方的信息.对方端口)
        是否已有 ＝ 真
        全UDP客户 [已次数].上次通讯 ＝ 到长整数 (时间_取现行时间戳 ())
    .如果真结束

.计次循环尾 ()
退出许可区 (UDP许可证)
.如果真 (是否已有 ＝ 假)
    此次UDP客户.对方信息 ＝ 对方的信息
    此次UDP客户.上次通讯 ＝ 到长整数 (时间_取现行时间戳 ())
    加入成员 (全UDP客户, 此次UDP客户)
.如果真结束
.如果真 (到文本 (收到UDP数据) ＝ “TEST”)
    返回 ()
.如果真结束
.如果真 (是否没重复 (收到UDP数据))
    发送数据 (收到UDP数据, 0)
    收到数据 (收到UDP数据)
.如果真结束


.子程序 _UDP超时检测_周期事件
.局部变量 已次数, 整数型
.局部变量 当前时间, 长整数型
.局部变量 用户IP, 文本型, , "0"
.局部变量 内已次数, 整数型
.局部变量 是否有了, 逻辑型

进入许可区 (UDP许可证)
当前时间 ＝ 到长整数 (时间_取现行时间戳 ())
.计次循环首 (取数组成员数 (全UDP客户), 已次数)
    .如果真 (已次数 ＞ 取数组成员数 (全UDP客户))
        跳出循环 ()
    .如果真结束
    是否有了 ＝ 假
    .计次循环首 (取数组成员数 (用户IP), 内已次数)
        .如果真 (用户IP [内已次数] ＝ 全UDP客户 [已次数].对方信息.对方IP)
            是否有了 ＝ 真
        .如果真结束

    .计次循环尾 ()
    .如果真 (是否有了 ＝ 假)
        加入成员 (用户IP, 全UDP客户 [已次数].对方信息.对方IP)
    .如果真结束
    .如果真 (当前时间 － 全UDP客户 [已次数].上次通讯 ＞ 4000)
        删除成员 (全UDP客户, 已次数, 1)
    .如果真结束

.计次循环尾 ()
.计次循环首 (取数组成员数 (全客户), 已次数)
    是否有了 ＝ 假
    .计次循环首 (取数组成员数 (用户IP), 内已次数)
        .如果真 (用户IP [内已次数] ＝ 文本_取出中间文本 (“A” ＋ 全客户 [已次数], “A”, “:”))
            是否有了 ＝ 真
        .如果真结束

    .计次循环尾 ()
    .如果真 (是否有了 ＝ 假)
        加入成员 (用户IP, 文本_取出中间文本 (“A” ＋ 全客户 [已次数], “A”, “:”))
    .如果真结束

.计次循环尾 ()
退出许可区 (UDP许可证)
.如果 (是否中文系统)
    标签延迟.标题 ＝ 转换编码 (“IP:” ＋ 到文本 (取数组成员数 (用户IP)) ＋ “个,TCP连接:” ＋ 到文本 (取数组成员数 (全客户)) ＋ “个,UDP连接:” ＋ 到文本 (取数组成员数 (全UDP客户)) ＋ “个”)
.否则
    标签延迟.标题 ＝ “IP:” ＋ 到文本 (取数组成员数 (用户IP)) ＋ “,TCPclient:” ＋ 到文本 (取数组成员数 (全客户)) ＋ “,UDPclient:” ＋ 到文本 (取数组成员数 (全UDP客户))
.如果结束


.子程序 _数据报1_数据到达

收到数据 (数据报1.取回数据 ())
' 调试输出 (“UDP客户数据到达”)

.子程序 _UDP心跳包_周期事件

数据报1.发送数据 (服务器IP, 使用端口, 到字节集 (“TEST”))

.子程序 是否没重复, 逻辑型
.参数 对比数据, 字节集
.局部变量 已次数, 整数型

.计次循环首 (3, 已次数)
    .如果真 (对比数据 ＝ 最近数据 [已次数])
        返回 (假)
    .如果真结束

.计次循环尾 ()
最近数据第几 ＝ 最近数据第几 ＋ 1
.如果真 (最近数据第几 ＞ 3)
    最近数据第几 ＝ 1
.如果真结束
最近数据 [最近数据第几] ＝ 对比数据
返回 (真)

.子程序 _选择框6_被单击

触发保存 ()

.子程序 _选择框5_被单击

触发保存 ()
.如果真 (选择框5.选中 ＝ 假)
    .如果 (是否中文系统)
        输出文本 (“不建议只使用UDP传输”, 真, 真)
    .否则
        输出文本 (“It is not recommended to use only UDP datagrams.”, 真, 真)
    .如果结束

.如果真结束


.子程序 _组合框4_列表项被选择

触发保存 ()
.如果真 (组合框4.现行选中项 ＝ 0)
    是否中文系统 ＝ 真
    是否繁体系统 ＝ 假
    编辑框1.内容 ＝ 编码_BIG5到简体 (编辑框1.内容)
    输出文本 (“已改为简体中文”, 真, 真)
    切换简繁体 ()
.如果真结束
.如果真 (组合框4.现行选中项 ＝ 1)
    是否中文系统 ＝ 真
    是否繁体系统 ＝ 真
    编辑框1.内容 ＝ 编码_简体到BIG5 (编辑框1.内容)
    输出文本 (“已改为繁体中文”, 真, 真)
    切换简繁体 ()
.如果真结束
.如果真 (组合框4.现行选中项 ＝ 2)
    是否中文系统 ＝ 假
    编辑框1.内容 ＝ “If in doubt, click the button in the lower right corner to display the description.” ＋ #换行符 ＋ “If you don't set it, you don't have to set up an item you don't understand. The default setting is fine.” ＋ #换行符 ＋ “Output information:”
    输出文本 (“Set to English”, 真, 真)
    改为英语 ()
.如果真结束


.子程序 取系统语言2, 整数型
.局部变量 LocaleID, 整数型
.局部变量 返回值, 整数型

LocaleID ＝ GetSystemDefaultLCID ()
.判断开始 (LocaleID ＝ 1028)
    返回值 ＝ 1
.判断 (LocaleID ＝ 2052)
    返回值 ＝ 0
.判断 (LocaleID ＝ 1033)
    返回值 ＝ 2
.默认
    返回值 ＝ 2
.判断结束
返回 (返回值)

.子程序 WS连接
.参数 此次ID, 整数型
.局部变量 frame, WebsocketFrame
.局部变量 i, 整数型
.局部变量 WSAData, WSADATA
.局部变量 当前接收, 文本型
.局部变量 全部客户, 文本型
.局部变量 全部客户数组, 文本型, , "0"
.局部变量 已次数, 整数型
.局部变量 当前客户信息, WS客户
.局部变量 加粗内容, 文本型
.局部变量 接收原文, 文本型
.局部变量 全部接收, 文本型, , "0"
.局部变量 外已次数, 整数型

.如果真 (WSAStartup (合并短整数 (2, 2), WSAData) ≠ 0)
    输出调试文本 (“WSA 初始化失败”)
    WS连接结果 ＝ 101
    返回 ()
.如果真结束
调试输出 (“”, “==================ws==============”)
.如果 (是否中文系统)
    输出文本 (“连接:” ＋ 全WS服务器 [WS使用服务器].服务器描述, 真, 真)
.否则
    输出文本 (“Connection:” ＋ 全WS服务器 [WS使用服务器].服务器描述, 真, 真)
.如果结束
.如果 (是否中文系统)
    输出文本 (“WebSocket连接:”, 真, 真)
    输出文本 (“初始化”)
.否则
    输出文本 (“WebSocketClient:”, 真, 真)
    输出文本 (“initialize ”)
.如果结束
.如果 (ws.Init (全WS服务器 [WS使用服务器].服务器地址, 10000))  ' 连接
    .如果 (是否中文系统)
        输出文本 (“成功”)
    .否则
        输出文本 (“success”)
    .如果结束

.否则
    .如果 (是否中文系统)
        输出文本 (“失败”)
    .否则
        输出文本 (“failure”)
    .如果结束
    WS连接结果 ＝ 102
    返回 ()
.如果结束
.如果 (是否中文系统)
    输出文本 (“,握手”)
.否则
    输出文本 (“,shake hands ”)
.如果结束
.如果 (ws.HandShake ())  ' 握手
    .如果 (是否中文系统)
        输出文本 (“成功”)
    .否则
        输出文本 (“success”)
    .如果结束

.否则
    .如果 (是否中文系统)
        输出文本 (“失败”)
    .否则
        输出文本 (“failure”)
    .如果结束
    WS连接结果 ＝ 103
    返回 ()
.如果结束
WS连接结果 ＝ 1
是否关闭服务器 ＝ 真
ws.Send (真, #OPCODE_TEXT, 真, 编码_Ansi到Utf8_2 (引号替换 (“{'type':'login','client_name':'” ＋ 当前ID ＋ “','room_id':'1'}”)))
' ws.Send (真, #OPCODE_TEXT, 真, 编码_Ansi到Utf8_2 (子文本替换 (“{'type':'login','client_name':'游客','room_id':'1'}”, “'”, #引号, , , 真)))
.循环判断首 ()
    .如果真 (ws.Recv (frame))
        调试输出 (到长整数 (时间_取现行时间戳 ()))
        ' 当前接收 ＝ 引号替换 (编码_Utf8到Ansi_2 (frame.payload_data), 真)
        清除数组 (全部接收)
        接收原文 ＝ 引号替换 (编码_Utf8到Ansi_2 (frame.payload_data), 真)
        全部接收 ＝ 分割文本 (接收原文, “}”, )
        .计次循环首 (取数组成员数 (全部接收), 外已次数)
            当前接收 ＝ 全部接收 [外已次数] ＋ “}”

            当前接收 ＝ 文本_替换 (当前接收, , , , “\/”, “/”)
            加粗内容 ＝ 文本_取出中间文本 (当前接收, “content':'<b>”, “</b>”)
            .如果真 (加粗内容 ≠ “”)
                当前接收 ＝ 文本_替换 (当前接收, , , , “<b>” ＋ 加粗内容 ＋ “</b>”, “”)
            .如果真结束
            调试输出 (当前接收)
            上次接收时间 ＝ 到长整数 (时间_取现行时间戳 ())
            .如果真 (当前接收 ＝ “{'type':'ping'}”)
                ws.Send (真, #OPCODE_TEXT, 真, 编码_Ansi到Utf8_2 (引号替换 (“{'type':'pong'}”)))
                ' ws.Send (真, #OPCODE_TEXT, 真, 编码_Ansi到Utf8_2 (引号替换 (“{'type':'say','to_client_id':'all','to_client_name':'所有人','content':'123456789'}”)))
                到循环尾 ()
            .如果真结束
            .如果真 (快速取出现次数 (当前接收, “type':'login'”) ≠ 0)
                .如果 (快速取出现次数 (当前接收, “client_list':{”) ≠ 0)
                    清除数组 (全WS客户)
                    全部客户 ＝ 文本_取出中间文本 (当前接收, “client_list':{”, “}”)
                    全部客户数组 ＝ 分割文本 (全部客户, “,”, )
                    .计次循环首 (取数组成员数 (全部客户数组), 已次数)
                        当前客户信息.id ＝ 文本_取出中间文本 (全部客户数组 [已次数], “'”, “':”)
                        当前客户信息.name ＝ 文本_取出中间文本 (全部客户数组 [已次数], “:'”, “'”)
                        .如果真 (当前客户信息.id ≠ “” 且 当前客户信息.name ≠ “”)
                            加入成员 (全WS客户, 当前客户信息)
                        .如果真结束

                    .计次循环尾 ()
                    清除数组 (全部客户数组)
                    全部客户 ＝ “”
                .否则
                    当前客户信息.id ＝ 文本_取出中间文本 (当前接收, “client_id':'”, “'”)
                    当前客户信息.name ＝ 文本_取出中间文本 (当前接收, “client_name':'”, “'”)
                    .如果真 (当前客户信息.id ≠ “” 且 当前客户信息.name ≠ “”)
                        加入成员 (全WS客户, 当前客户信息)
                    .如果真结束

                .如果结束
                统计WS人数 ()
            .如果真结束
            .如果真 (快速取出现次数 (当前接收, “type':'logout'”) ≠ 0)
                当前客户信息.id ＝ 文本_取出中间文本 (当前接收, “from_client_id':'”, “'”)
                当前客户信息.name ＝ 文本_取出中间文本 (当前接收, “from_client_name':'”, “'”)
                .计次循环首 (取数组成员数 (全WS客户), 已次数)
                    .如果真 (全WS客户 [已次数].id ＝ 当前客户信息.id 且 全WS客户 [已次数].name ＝ 当前客户信息.name)
                        删除成员 (全WS客户, 已次数, )
                        跳出循环 ()
                    .如果真结束

                .计次循环尾 ()
                统计WS人数 ()
            .如果真结束
            .如果真 (文本_取出中间文本 (当前接收, “client_name':'”, “'”) ＝ 当前ID)
                .如果真 (快速取出现次数 (当前接收, “type':'login'”) ≠ 0)
                    .如果 (是否中文系统)
                        输出文本 (#换行符 ＋ 时间_到文本 (, 1, 3) ＋ “ 有人加入房间”)
                    .否则
                        输出文本 (#换行符 ＋ 时间_到文本 (, 1, 3) ＋ “ There are new users connected to the server”)
                    .如果结束
                    到循环尾 ()
                .如果真结束
                .如果真 (快速取出现次数 (当前接收, “type':'logout'”) ≠ 0)
                    .如果 (是否中文系统)
                        输出文本 (#换行符 ＋ 时间_到文本 (, 1, 3) ＋ “ 有人离开房间”)
                    .否则
                        输出文本 (#换行符 ＋ 时间_到文本 (, 1, 3) ＋ “ A user disconnected the server”)
                    .如果结束
                    到循环尾 ()
                .如果真结束
                WS收到数据 (编码_BASE64解码 (文本_取出中间文本 (当前接收, “content':'”, “'”)))
            .如果真结束

        .计次循环尾 ()
    .如果真结束

.循环判断尾 (继续接收ID ＝ 此次ID)
WSACleanup ()

.子程序 统计WS人数
.局部变量 已次数, 整数型
.局部变量 同房间数量, 整数型

.计次循环首 (取数组成员数 (全WS客户), 已次数)
    .如果真 (全WS客户 [已次数].name ＝ 当前ID)
        同房间数量 ＝ 同房间数量 ＋ 1
    .如果真结束

.计次循环尾 ()
.如果 (是否中文系统)
    标签延迟.标题 ＝ 转换编码 (“在线：当前房间” ＋ 到文本 (同房间数量) ＋ “人，服务器共” ＋ 到文本 (取数组成员数 (全WS客户)) ＋ “人”)
.否则
    标签延迟.标题 ＝ 转换编码 (“Online:Current number:” ＋ 到文本 (同房间数量) ＋ “,Server” ＋ 到文本 (取数组成员数 (全WS客户)))
.如果结束
WS全客户数量 ＝ 取数组成员数 (全WS客户)

.子程序 引号替换, 文本型, , 单引号替换为双引号
.参数 输入的文本, 文本型
.参数 输入双引号, 逻辑型, 可空

.如果真 (输入双引号)
    返回 (文本_替换 (输入的文本, , , , #引号, “'”))
.如果真结束
返回 (文本_替换 (输入的文本, , , , “'”, #引号))

.子程序 WS发送数据
.参数 要发送的数据, 字节集
.参数 是否关键, 逻辑型
.局部变量 已次数, 整数型
.局部变量 当前客户, WS客户
.局部变量 此次内容, 文本型

.如果真 (是否关键 ＝ 假)
    .如果真 (WS全客户数量 ＞ 16)
        .计次循环首 (取数组成员数 (全WS客户), 已次数)
            .如果真 (已次数 ＞ 取数组成员数 (全WS客户))
                跳出循环 ()
            .如果真结束
            当前客户 ＝ 全WS客户 [已次数]
            .如果真 (当前客户.name ＝ 当前ID)
                ws.Send (真, #OPCODE_TEXT, 真, 编码_Ansi到Utf8_2 (引号替换 (“{'type':'say','to_client_id':'” ＋ 当前客户.id ＋ “','to_client_name':'” ＋ 当前客户.name ＋ “','content':'” ＋ 文本_替换 (到文本 (编码_BASE64编码A (要发送的数据)), , , , “/”, “\/”) ＋ “'}”)))
            .如果真结束

        .计次循环尾 ()
        返回 ()
    .如果真结束

.如果真结束
ws.Send (真, #OPCODE_TEXT, 真, 编码_Ansi到Utf8_2 (引号替换 (“{'type':'say','to_client_id':'all','to_client_name':'所有人','content':'” ＋ 文本_替换 (到文本 (编码_BASE64编码A (要发送的数据)), , , , “/”, “\/”) ＋ “'}”)))
调试输出 (到长整数 (时间_取现行时间戳 ()))

.子程序 WS收到数据
.参数 此次的数据, 字节集

收到数据 (此次的数据)

.子程序 WS创建连接, 逻辑型
.局部变量 ID随机数, 整数型
.局部变量 已次数, 整数型

.如果真 (获取WS服务器 () ＝ 假)
    返回 (假)
.如果真结束
.计次循环首 (取数组成员数 (全WS服务器), 已次数)
    .如果真 (WS线程 ≠ 0)
        强制结束线程 (WS线程)
    .如果真结束
    置随机数种子 ()
    ID随机数 ＝ 取随机数 (1, 32767)
    继续接收ID ＝ ID随机数
    WS连接结果 ＝ 0
    WS使用服务器 ＝ 已次数
    启动线程 (&WS连接, ID随机数, WS线程)
    .判断循环首 (WS连接结果 ＝ 0)
        延时 (10)
        处理事件 ()
    .判断循环尾 ()
    .如果真 (WS连接结果 ＝ 1)
        返回 (真)
    .如果真结束

.计次循环尾 ()
返回 (假)

.子程序 _编辑框2_内容被改变

.如果 (取文本左边 (编辑框2.内容, 1) ＝ “?”)
    .如果真 (标签8.可视 ＝ 假)
        标签8.左边 ＝ 8
        标签8.顶边 ＝ 44
        标签8.宽度 ＝ 264
        标签8.高度 ＝ 40
        标签8.可视 ＝ 真
    .如果真结束

.否则
    .如果真 (标签8.可视 ＝ 真)
        标签8.左边 ＝ 248
        标签8.顶边 ＝ 62
        标签8.宽度 ＝ 24
        标签8.高度 ＝ 24
        标签8.可视 ＝ 假
    .如果真结束

.如果结束


.子程序 从路由器获取WAN口IP, 文本型
.参数 路由器IP, 文本型
.局部变量 当前UDP, 网络数据报
.局部变量 路由器信息, 对方信息
.局部变量 当前使用端口, 整数型
.局部变量 接收结果, 逻辑型
.局部变量 收到对方信息, 对方信息
.局部变量 已次数, 整数型
.局部变量 输出文本, 文本型
.局部变量 取出字节集, 字节集
.局部变量 收到字节集, 字节集

.如果真 (当前UDP.配置 (取随机数 (10000, 65535)) ＝ 假)
    .如果真 (当前UDP.配置 (取随机数 (10000, 65535)) ＝ 假)
        返回 (“”)
    .如果真结束

.如果真结束
路由器信息.对方IP ＝ 路由器IP
路由器信息.对方端口 ＝ 5351
当前UDP.发送 (路由器信息, { 0, 0 }, 100)
收到字节集 ＝ 当前UDP.接收 (500, 收到对方信息, 接收结果)
当前UDP.关闭 ()
.如果真 (接收结果 且 取字节集长度 (收到字节集) ＝ 12)
    取出字节集 ＝ 字节集_取指定位置字节集 (收到字节集, 9, 4)
    .计次循环首 (4, 已次数)
        输出文本 ＝ 输出文本 ＋ 到文本 (字节集_到整数 (字节集_取指定位置字节集 (取出字节集, 已次数, 1)))
        .如果真 (已次数 ≠ 4)
            输出文本 ＝ 输出文本 ＋ “.”
        .如果真结束

    .计次循环尾 ()
    返回 (输出文本)
.如果真结束
返回 (“”)

.子程序 NATPMP创建映射, 整数型, , 返回成功创建的端口，失败返回0
.参数 路由器IP, 文本型
.参数 映射协议, 文本型, , 只能是TCP或UDP，必须是大写
.参数 内部端口, 整数型, , 1-65535
.参数 外部端口, 整数型, , 1-65535
.参数 映射时长, 整数型, , 秒，若为0应该是删除映射
.局部变量 当前UDP, 网络数据报
.局部变量 路由器信息, 对方信息
.局部变量 当前使用端口, 整数型
.局部变量 接收结果, 逻辑型
.局部变量 收到对方信息, 对方信息
.局部变量 收到字节集, 字节集
.局部变量 发送字节集, 字节集

.如果真 (当前UDP.配置 (取随机数 (10000, 65535)) ＝ 假)
    .如果真 (当前UDP.配置 (取随机数 (10000, 65535)) ＝ 假)
        返回 (0)
    .如果真结束

.如果真结束
路由器信息.对方IP ＝ 路由器IP
路由器信息.对方端口 ＝ 5351
发送字节集 ＝ { 0, 2, 0, 0 }
.如果真 (映射协议 ＝ “UDP”)
    发送字节集 ＝ { 0, 1, 0, 0 }
.如果真结束
发送字节集 ＝ 发送字节集 ＋ 字节集倒序 (取字节集左边 (到字节集 (内部端口), 2))
发送字节集 ＝ 发送字节集 ＋ 字节集倒序 (取字节集左边 (到字节集 (外部端口), 2))
发送字节集 ＝ 发送字节集 ＋ 字节集倒序 (到字节集 (映射时长))
当前UDP.发送 (路由器信息, 发送字节集, 100)
收到字节集 ＝ 当前UDP.接收 (500, 收到对方信息, 接收结果)
当前UDP.关闭 ()
.如果真 (接收结果 且 取字节集长度 (收到字节集) ＝ 16)
    .如果真 (字节集_到整数 (字节集倒序 (字节集_取指定位置字节集 (收到字节集, 3, 2))) ≠ 0)
        返回 (0)
    .如果真结束
    .如果 (映射协议 ＝ “TCP”)
        .如果真 (字节集_到整数 (字节集_取指定位置字节集 (收到字节集, 2, 1)) ≠ 130)
            返回 (0)
        .如果真结束

    .否则
        .如果真 (字节集_到整数 (字节集_取指定位置字节集 (收到字节集, 2, 1)) ≠ 129)
            返回 (0)
        .如果真结束

    .如果结束
    返回 (字节集_到整数 (字节集倒序 (字节集_取指定位置字节集 (收到字节集, 11, 2))))
.如果真结束
返回 (0)

.子程序 字节集倒序, 字节集
.参数 要转换的字节集, 字节集
.局部变量 输出字节集, 字节集
.局部变量 字节集长度, 整数型
.局部变量 已次数, 整数型

字节集长度 ＝ 取字节集长度 (要转换的字节集)
.计次循环首 (字节集长度, 已次数)
    输出字节集 ＝ 输出字节集 ＋ 字节集_取指定位置字节集 (要转换的字节集, 字节集长度 ＋ 1 － 已次数, 1)
.计次循环尾 ()
返回 (输出字节集)

.子程序 取网关IP, 文本型
.局部变量 网卡, 精易_网卡信息, , "0"
.局部变量 网卡彗星, 精易_网卡信息_彗星, , "0"
.局部变量 已次数, 整数型

系统_取网卡信息 (网卡)
.计次循环首 (取数组成员数 (网卡), 已次数)
    .如果真 (是否为IPv4地址 (网卡 [已次数].网关))
        返回 (网卡 [已次数].网关)
    .如果真结束

.计次循环尾 ()
返回 (“”)

.子程序 _NATPMP时钟_周期事件
.局部变量 创建结果, 整数型

创建结果 ＝ 0
创建结果 ＝ 创建结果 ＋ NATPMP创建映射 (网关IP, “TCP”, 26576, 使用端口, 3600)
创建结果 ＝ 创建结果 ＋ NATPMP创建映射 (网关IP, “UDP”, 26576, 使用端口, 3600)
.如果真 (创建结果 ＝ 0)
    输出文本 (“错误:NAT-PMP端口映射续期失败”, 真, 真)
.如果真结束
.如果真 (创建结果 ≠ 0 且 创建结果 ≠ 使用端口 × 2)
    创建结果 ＝ 0
    创建结果 ＝ 创建结果 ＋ NATPMP创建映射 (网关IP, “TCP”, 26576, 使用端口, 3600)
    创建结果 ＝ 创建结果 ＋ NATPMP创建映射 (网关IP, “UDP”, 26576, 使用端口, 3600)
    .如果真 (创建结果 ≠ 使用端口 × 2)
        输出文本 (“错误:NAT-PMP映射续期失败或发生变化”, 真, 真)
    .如果真结束

.如果真结束


.子程序 _选择框7_被单击

.如果真 (选择框7.选中)
    .如果 (是否中文系统)
        输出文本 (“建议先在游戏中测试进程断网确认有效再使用”, 真, 真)
    .否则
        输出文本 (“It is recommended to test the process disconnection function first, and then use it after confirming the validity.”, 真, 真)
    .如果结束

.如果真结束
触发保存 ()

.子程序 _编辑框7_内容被改变

触发保存 ()
.版本 2

.程序集 窗口程序集_窗口1

.子程序 _窗口1_按下某键, 逻辑型
.参数 键代码, 整数型
.参数 功能键状态, 整数型

.如果真 (键代码 ＝ #回车键)
    _按钮1_被单击 ()
.如果真结束
返回 (真)

.子程序 _按钮1_被单击

.如果真 (选择框1.选中 ＝ 假 且 选择框2.选中 ＝ 假)
    信息框 (“请勾选其中一个网站后再点打开”, 0, , )
.如果真结束
.如果真 (选择框2.选中)
    网页_打开指定网址 (“https://wgzeyu.gtxcn.com/GTASuperESC/video2.mp4”)
.如果真结束
.如果真 (选择框1.选中)
    网页_打开指定网址 (“https://wgzeyu.gtxcn.com/GTASuperESC/video.mp4”)
.如果真结束


.子程序 _按钮2_被单击

.如果真 (选择框1.选中 ＝ 假 且 选择框2.选中 ＝ 假)
    信息框 (“请勾选其中一个网站后再点打开”, 0, , )
.如果真结束
.如果真 (选择框2.选中)
    网页_打开指定网址 (“https://www.bilibili.com/video/av28899499/?p=3”)
.如果真结束
.如果真 (选择框1.选中)
    网页_打开指定网址 (“https://www.bilibili.com/video/av28899499/?p=2”)
.如果真结束


.子程序 _按钮3_被单击

销毁 ()

.子程序 _窗口1_转为繁体

窗口1.标题 ＝ 编码互转 (窗口1.标题)
标签1.标题 ＝ 编码互转 (标签1.标题)
选择框1.标题 ＝ 编码互转 (选择框1.标题)
选择框2.标题 ＝ 编码互转 (选择框2.标题)
按钮1.标题 ＝ 编码互转 (按钮1.标题)
按钮2.标题 ＝ 编码互转 (按钮2.标题)
按钮3.标题 ＝ 编码互转 (按钮3.标题)

.子程序 _窗口1_首次激活

.如果真 (是否繁体系统)
    _窗口1_转为繁体 ()
.如果真结束

.版本 2
.支持库 EThread
.支持库 spec

.程序集 窗口程序集_教程窗口
.程序集变量 全图片, 字节集, , "0"
.程序集变量 图片数量, 整数型
.程序集变量 当前图片, 整数型
.程序集变量 全网址, 文本型, , "2"

.子程序 _教程窗口_创建完毕

.如果真 (是否繁体系统)
    教程窗口.标题 ＝ 转换编码 (教程窗口.标题)
.如果真结束
.如果真 (是否中文系统 ＝ 假)
    教程窗口.标题 ＝ “Software introduction”
.如果真结束
当前图片 ＝ 1
时钟1.时钟周期 ＝ 10
全网址 [1] ＝ “https://wgzeyu.gtxcn.com/GTASuperESC/img/”
全网址 [2] ＝ “https://wgzeyu.github.io/GTASuperESC/img/”
启动线程 (&加载图片, 1, )
启动线程 (&加载图片, 2, )

.子程序 加载图片
.参数 传入第几个, 整数型
.局部变量 当前地址, 文本型
.局部变量 当前数量, 整数型
.局部变量 当前的图片, 字节集
.局部变量 返回状态, 整数型
.局部变量 失败次数, 整数型

当前地址 ＝ 全网址 [传入第几个]
当前数量 ＝ 1
.循环判断首 ()
    .如果真 (图片数量 ≠ 0)
        返回 ()
    .如果真结束
    当前的图片 ＝ 网页_访问_对象 (当前地址 ＋ 到文本 (当前数量) ＋ “.png”, , , , , , , 返回状态)
    .如果真 (返回状态 ＝ 404)
        图片数量 ＝ 当前数量 － 1
        返回 ()
    .如果真结束
    .如果 (图片_取宽度 (当前的图片) ＝ 600)
        .如果 (取数组成员数 (全图片) ＜ 当前数量)
            加入成员 (全图片, 当前的图片)
            调试输出 (网页_取域名 (当前地址), “最先获取到第”, 当前数量, “页”)
        .否则
            调试输出 (网页_取域名 (当前地址), “成功获取到第”, 当前数量, “页”)
        .如果结束
        当前数量 ＝ 当前数量 ＋ 1
    .否则
        失败次数 ＝ 失败次数 ＋ 1
        调试输出 (当前地址 ＋ 到文本 (当前数量) ＋ “.png”, “加载失败”)
        调试输出 (到文本 (当前图片))
        延时 (100)
    .如果结束

.循环判断尾 (失败次数 ＜ 20)

.子程序 _时钟1_周期事件

.如果 (取数组成员数 (全图片) ＜ 当前图片)
    .如果真 (图片框1.图片 ≠ #加载中图片)
        图片框1.图片 ＝ #加载中图片
        调试输出 (“载入加载中”)
    .如果真结束

.否则
    .如果真 (图片框1.图片 ≠ 全图片 [当前图片])
        图片框1.图片 ＝ 全图片 [当前图片]
        调试输出 (“载入图片”, 当前图片)
    .如果真结束

.如果结束
.如果真 (图片数量 ≠ 0)
    .如果真 (当前图片 ＞ 图片数量)
        当前图片 ＝ 图片数量
    .如果真结束
    .如果 (当前图片 ＝ 图片数量)
        .如果真 (按钮2.标题 ≠ “X”)
            按钮2.标题 ＝ “X”
        .如果真结束

    .否则
        .如果真 (按钮2.标题 ≠ “>”)
            按钮2.标题 ＝ “>”
        .如果真结束

    .如果结束

.如果真结束
.如果 (当前图片 ＝ 1)
    .如果真 (按钮1.禁止 ＝ 假)
        按钮1.禁止 ＝ 真
    .如果真结束

.否则
    .如果真 (按钮1.禁止 ＝ 真)
        按钮1.禁止 ＝ 假
    .如果真结束

.如果结束


.子程序 _按钮1_被单击

当前图片 ＝ 当前图片 － 1

.子程序 _按钮2_被单击

.如果 (当前图片 ＝ 图片数量)
    销毁 ()
.否则
    当前图片 ＝ 当前图片 ＋ 1
.如果结束


.子程序 _图片框1_鼠标左键被按下, 逻辑型
.参数 横向位置, 整数型
.参数 纵向位置, 整数型
.参数 功能键状态, 整数型

当前图片 ＝ 当前图片 ＋ 1

.子程序 _图片框1_鼠标右键被按下, 逻辑型
.参数 横向位置, 整数型
.参数 纵向位置, 整数型
.参数 功能键状态, 整数型

.如果真 (当前图片 ＞ 1)
    当前图片 ＝ 当前图片 － 1
.如果真结束

.版本 2
.支持库 sock

.全局变量 使用端口, 整数型
.全局变量 内网IP, 文本型
.全局变量 外网IP, 文本型
.全局变量 网关IP, 文本型
.全局变量 当前运营商, 文本型
.全局变量 加密秘钥, 文本型
.全局变量 全客户, 文本型, , "0"
.全局变量 已收到过的数据, 文本型, , "0", 配合HASH与MD5防重放攻击
.全局变量 是否关闭服务器, 逻辑型
.全局变量 上次接收时间, 长整数型
.全局变量 服务器IP, 文本型
.全局变量 是否检测中, 逻辑型
.全局变量 当前版本, 整数型
.全局变量 网络详情, 网络信息, , "0"
.全局变量 上次干掉时间, 长整数型
.全局变量 心跳包周期, 整数型
.全局变量 是否断网, 逻辑型
.全局变量 全延迟, 整数型, , "5"
.全局变量 上次延迟, 整数型
.全局变量 上次延迟位置, 整数型
.全局变量 延迟发送时间, 长整数型
.全局变量 UDP数据报, 网络数据报
.全局变量 UDP线程, 整数型
.全局变量 全UDP客户, UDP客户, , "0"
.全局变量 最近数据, 字节集, , "3"
.全局变量 最近数据第几, 整数型
.全局变量 UPnP创建结果, 整数型
.全局变量 是否中文系统, 逻辑型
.全局变量 是否繁体系统, 逻辑型
.全局变量 当前ID, 文本型
.全局变量 继续接收ID, 整数型
.全局变量 WS线程, 整数型
.全局变量 WS连接结果, 整数型
.全局变量 WS使用服务器, 整数型
.全局变量 全WS客户, WS客户, , "0"
.全局变量 WS全客户数量, 整数型
.全局变量 UDP许可证, 整数型
.版本 2
.支持库 sock

.数据类型 TOKEN_ELEVATION, , ,
    .成员 TokenIsElevated, 整数型

.数据类型 网络信息, 公开
    .成员 管理员状态, 文本型
    .成员 状态, 文本型
    .成员 类型, 文本型
    .成员 接口名称, 文本型

.数据类型 UDP客户
    .成员 对方信息, 对方信息
    .成员 上次通讯, 长整数型

.数据类型 服务器信息
    .成员 服务器地址, 文本型
    .成员 服务器描述, 文本型
    .成员 平均延迟, 整数型
    .成员 丢包率, 小数型
    .成员 延迟波动, 整数型
    .成员 服务端延迟, 整数型
    .成员 整体分数, 整数型, , , 数字越小连接质量越好

.数据类型 WS客户
    .成员 id, 文本型
    .成员 name, 文本型
.版本 2

.DLL命令 GetTokenInformation, 整数型, , "GetTokenInformation", , ,
    .参数 TokenHandle, 整数型, , 0
    .参数 TokenInformationClass, 整数型, , 0
    .参数 TokenInformation, TOKEN_ELEVATION, , 0
    .参数 TokenInformationLength, 整数型, , 0
    .参数 ReturnLength, 整数型, 传址, 0

.DLL命令 WSAStartup, 整数型, "ws2_32.dll", "WSAStartup", 公开, int  WSAStartup  初始化WnSocket服务 成功返回0
    .参数 wVersionRequested, 短整数型, , 合并短整数(2,2)_In_  WORD      wVersionRequested,
    .参数 lpWSAData, WSADATA, , _Out_ LPWSADATA lpWSAData

.DLL命令 WSACleanup, 整数型, "ws2_32.dll", "WSACleanup", 公开, int  WSACleanup 卸载Winsocket服务 成功返回0

.DLL命令 QueryDosDevice, 整数型, "kernel32", "QueryDosDeviceA", , , 在Windows NT中，DOS设备名会映射成NT系统设备名。该函数可判断当前的设备映射情况  零表示出错。如执行成功，返回保存到lpTargetPath的字符数。会设置GetLastError
    .参数 lpDeviceName, 文本型, , 如果是vbNull，那么lpTargetPath会载入当前映射的MS-DOS名称的一个列表。如果是个MS-DOS名，则lpTargetPath会载入一个设备映射列表（第一个名字是活动映射，后续的名字是以前尚未删掉的映射）
    .参数 lpTargetPath, 文本型, , 名称列表，具体取决于lpDeviceName参数。这些名字用NULL字符分隔。列表最后用两个连续的NULL字符中止
    .参数 ucchMax, 整数型, , lpTargetPath缓冲区的大小  适用平台Windows NT;

.DLL命令 GetProcessImageFileNameA, 整数型, "psapi.dll"
    .参数 hp
    .参数 pn, 文本型
    .参数 lp

.DLL命令 GetSystemDefaultLCID, 整数型, "kernel32", "GetSystemDefaultLCID"
.版本 2

.常量 端口测试网站, "<文本长度: 1306>", , 常量值可用易语言IDE打开.e格式源码后双击查看；<0>编码<1>提交方式<2>提交地址<3>提交信息<4>成功信息<5>失败信息<6>cookie验证地址<7>超时时间(秒)<8>输出信息<9>
.常量 全部内网IP, "<文本长度: 346>", , 常量值可用易语言IDE打开.e格式源码后双击查看；里面记录了所有的内网IP和保留IP
.常量 检测公网IP网站, "<文本长度: 470>", , 常量值可用易语言IDE打开.e格式源码后双击查看；<0>编码<1>提交方式<2>提交地址<3>提交信息<4>取出前<5>取出后<6>超时时间(秒)<7>是否够快<8>输出信息<9>
.版本 2

.图片 加载中图片
